<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RecyclerView源码分析</title>
      <link href="/2019/07/08/RecyclerView%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2019/07/08/RecyclerView%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>RecyclerView想必大家都不陌生了，通过配合使用ListAdapter和LinearLayoutManager就能很容易的实现一个列表的展示，本篇文章将着重分析RecyclerView的这些部件是如何各司其职的，以及它的复用机制。</p><ul><li>RecyclerView是如何与Adapter和LayoutManager解耦的</li><li>Recylcer是如何管理ViewHolder的复用的</li></ul><p>带着这两个问题进入源码分析</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>以setAadapter作为切入点，开始探索RecyclerView的源码。</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Set a new adapter to provide child views on demand.     * &lt;p>     * When adapter is changed, all existing views are recycled back to the pool.      * If the pool has only one adapter, it will be cleared.     *     * @param adapter The new adapter to set, or null to set no adapter.     * @see #swapAdapter(Adapter, boolean)     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAdapter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> Adapter adapter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 是否停止一切Touch事件和滚动事件</span>        <span class="token function">setLayoutFrozen</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.原先的adapter注销观察者</span>        <span class="token comment" spellcheck="true">//2.把recycler中所有容器清空</span>        <span class="token comment" spellcheck="true">//3.新的adapter注册观察者</span>        <span class="token function">setAdapterInternal</span><span class="token punctuation">(</span>adapter<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processDataSetCompletelyChanged</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">requestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>由上可知，setAdapter改变了RecyclerView中mAadapter的指向，并将观察者注册到新的adapter，从而监听其数据变化，然后重新执行测量，布局和绘制流程。</p><h3 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure"></a>onMeasure</h3><p>实际上没什么好说的，就是一些常规的判断逻辑，分情况测量宽高什么的，值的注意的点是当LayoutManager开启了自动测量后(一般默认开启)，会先将子View先测量一遍，并且分别执行dispatchLayoutStep1、dispatchLayoutStep2进行预加载。</p><h3 id="onLayout"><a href="#onLayout" class="headerlink" title="onLayout"></a>onLayout</h3><p>如果自动测量没有开启则会在onLayout中测量子View，然后执行dispatchLayoutStep3，这个方法存储该View的相关，并做相关的清理工作。</p><h3 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a>onDraw</h3><p>onDraw方法中就做了画ItemDecoration的操作。</p><h3 id="复用机制"><a href="#复用机制" class="headerlink" title="复用机制"></a>复用机制</h3><p>RecyclerView之所以能够高效的复用ViewHolder得益于其中的Recycler，Recycler中包含着多种容器，分别对attchedScrap，changedScrap等类别的ViewHolder进行缓存，看看注释中是怎么对Recycler进行定义的吧：</p><ul><li>Recycle(view) 之前被使用展示数据，被放在缓存中等待被再次使用展示相同类型的数据。</li><li>Scrap(view) 在布局期间进入临时分离状态的子view，它可能还没有完全分离就被复用了，或者在没有重新绑定的需求后变的不可修改，或是被adapter认为是dirty的被修改。</li><li>Dirty(view) 在被展示前，子view必须被adapter复原</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token operator">></span> mAttachedScrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ArrayList<span class="token operator">&lt;</span>RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token operator">></span> mChangedScrap <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">final</span> ArrayList<span class="token operator">&lt;</span>RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token operator">></span> mCachedViews <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>RecyclerView<span class="token punctuation">.</span>ViewHolder<span class="token operator">></span> mUnmodifiableAttachedScrap<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> mRequestedCacheMax<span class="token punctuation">;</span><span class="token keyword">int</span> mViewCacheMax<span class="token punctuation">;</span>RecyclerView<span class="token punctuation">.</span>RecycledViewPool mRecyclerPool<span class="token punctuation">;</span><span class="token keyword">private</span> RecyclerView<span class="token punctuation">.</span>ViewCacheExtension mViewCacheExtension<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CACHE_SIZE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></code></pre><p>可以看到Recycler中维护着大量的容器，它们分别管理自己的ViewHolder，这些容器的存储/提取条件是什么呢？弄清了这个过程，RecyclerView的复用原理就差不多能理解了。</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">/**         * Mark an attached view as scrap.         *         * &lt;p>         * "Scrap" views are still attached to their parent RecyclerView but are eligible         * for rebinding and reuse. Requests for a view for a given position may return a         * reused or rebound scrap view instance.&lt;/p>         *         * @param view View to scrap         */</span>        <span class="token keyword">void</span> <span class="token function">scrapView</span><span class="token punctuation">(</span>View view<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> ViewHolder holder <span class="token operator">=</span> <span class="token function">getChildViewHolderInt</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>holder<span class="token punctuation">.</span><span class="token function">hasAnyOfTheFlags</span><span class="token punctuation">(</span>ViewHolder<span class="token punctuation">.</span>FLAG_REMOVED <span class="token operator">|</span> ViewHolder<span class="token punctuation">.</span>FLAG_INVALID<span class="token punctuation">)</span>                    <span class="token operator">||</span> <span class="token operator">!</span>holder<span class="token punctuation">.</span><span class="token function">isUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">canReuseUpdatedViewHolder</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//...</span>                mAttachedScrap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//...</span>                mChangedScrap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>holder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span></code></pre><p>RecyclerView对mAttachedScrap.add和mChangedScrap.add的调用就只有一处，在scrapView这个方法中，注释也说的很明白，把attached view 标记为scrap。</p><p>那么什么时候从缓存中获取ViewHolder的呢？通过追踪，最终调用tryGetViewHolderForPositionByDeadline，复用逻辑已经写在此处了：</p><ul><li>If there is a changed scrap, try to find from there</li><li>Find by position from scrap/hidden list/cache</li><li>Find from scrap/cache via stable ids, if exists</li><li>fallback to pool</li><li>如果上述4步都拿不到ViewHolder则通过createViewHolder实例化一个</li></ul><p>根据代码逻辑，可以大概的了解RecyclerView的ViewHolder复用顺序了：</p><ul><li>在mChangedScrap中查找</li><li>在mAttachedScrap中查找</li><li>在hiddenViews中查找</li><li>在mCachedViews中查找</li><li>在mAttachedScrap中通过id查找</li><li>在自定义的缓存扩展ViewCacheExtension中查找</li><li>在mRecyclerPool中查找</li><li>实例化一个ViewHolder</li></ul>]]></content>
      
      
      <categories>
          
          <category> android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语法糖 Part3</title>
      <link href="/2019/04/05/Kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part3/"/>
      <url>/2019/04/05/Kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前面的两篇文章中，我们了解到了：</p><ul><li>sealed</li><li>when()</li><li>with()</li><li>inline function and reified type</li></ul><p>在这章中，我会给大家分享我是如何使用Kotlin委托机制的。</p><h2 id="Kotlin的委托机制"><a href="#Kotlin的委托机制" class="headerlink" title="Kotlin的委托机制"></a>Kotlin的委托机制</h2><p>Kotlin有一个内置的<a href="https://www.kotlincn.net/docs/reference/delegation.html" target="_blank" rel="noopener">委托模式</a>。在一些书中也提及委托模式是实现继承的一个很好的替代方式，在Kotlin使用它进行聚合非常容易：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Navigable <span class="token punctuation">{</span>    <span class="token keyword">val</span> onNavigationClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token keyword">interface</span> Searchable <span class="token punctuation">{</span>    <span class="token keyword">val</span> searchText<span class="token operator">:</span>String<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Component</span><span class="token punctuation">(</span>navigation<span class="token operator">:</span> Navigable<span class="token punctuation">,</span> searchable<span class="token operator">:</span> Searchable<span class="token punctuation">)</span><span class="token operator">:</span> Navigable <span class="token keyword">by</span> navigable<span class="token punctuation">,</span> Searchabe <span class="token keyword">by</span> searchable</code></pre><p>使用by关键字，即可委托navigation、searchable的所有行为。比起Java，Kotlin减少了大量的模板代码。如果你把interface标记为internal，你会发现编译不能通过</p><blockquote><p>‘public’ function exposes its ‘internal’ parameter type xxx  </p></blockquote><p>Kotlin编译器不允许暴露模块的内部组件，如果想在不暴露Navigable，Searchable的前提下解决这个问题，你只需要做：</p><ul><li>移除构造器</li><li>使用组合代替聚合</li><li>定义包含Navigable和Searchable方法名的ComponentInterface</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> ComponentInterface <span class="token punctuation">{</span>    <span class="token keyword">val</span> onNavigationClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token operator">?</span>    <span class="token keyword">var</span> searchText<span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token keyword">class</span> Component<span class="token operator">:</span> ComponentInterface <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> navigable<span class="token operator">:</span> Navigable <span class="token operator">=</span> <span class="token function">NavigableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> searchable<span class="token operator">:</span> Searchable <span class="token operator">=</span> <span class="token function">SearchableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> onNavigationClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> navigable<span class="token punctuation">.</span>onNavigationClick    <span class="token keyword">override</span> <span class="token keyword">var</span> searchText<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> searchable<span class="token punctuation">.</span>searchText        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            field <span class="token operator">=</span> value            searchable<span class="token punctuation">.</span>searchText <span class="token operator">=</span> value        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>经过改造后，你发现代码从零模板的聚合变成了看上去很讨厌的组合方式。但是先别哭，Kotlin总能给你带来愉悦的编码体验。Kotlin不仅支持使用by关键字对指定对象进行方法委派，还具有委托属性的机制。你可能已经在使用lazy关键字初始化对象时接触到了它的这一机制了。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">val</span> lazyProperty <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> <span class="token string">""</span> <span class="token punctuation">}</span></code></pre><p>怎么从使用lazy()上来改造上面组合的代码呢，请看代码：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ReferencedProperty<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> <span class="token keyword">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">,</span>                            <span class="token keyword">private</span> <span class="token keyword">val</span> <span class="token keyword">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    operator <span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span>                          property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    operator <span class="token keyword">fun</span> <span class="token function">setValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span>                          property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">,</span>                          value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">ref</span><span class="token punctuation">(</span>property<span class="token operator">:</span> KMutableProperty0<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ReferencedProperty</span><span class="token punctuation">(</span>property<span class="token operator">::</span><span class="token keyword">get</span><span class="token punctuation">,</span>                                                                 property<span class="token operator">::</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">ref</span><span class="token punctuation">(</span>property<span class="token operator">:</span> KProperty0<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ReferencedProperty</span><span class="token punctuation">(</span>property<span class="token operator">::</span><span class="token keyword">get</span><span class="token punctuation">)</span></code></pre><p>ReferencedProperty用两个方法作为参数，并定义了两个函数：</p><ul><li>get函数返回泛型T</li><li>set函数以T作为参数</li><li>getValue()调用get()</li><li>setValue()调用set()</li></ul><p>最重要的一点是你需要知道操作符用到了属性代理机制。在ReferencedProperty类下，你会发现两个返回ReferencedProperty的泛型方法，第一个用于var，第二个用于val。<br>现在让我们用ref()简化代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Component <span class="token operator">:</span> ComponentInterface <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> navigable<span class="token operator">:</span> Navigable <span class="token operator">=</span> <span class="token function">NavigableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> searchable<span class="token operator">:</span> Searchable <span class="token operator">=</span> <span class="token function">SearchableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> onNavigationClick <span class="token keyword">by</span> <span class="token function">ref</span><span class="token punctuation">(</span>navigable<span class="token operator">::</span>onNavigationClick<span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> searchText <span class="token keyword">by</span> <span class="token function">ref</span><span class="token punctuation">(</span>searchable<span class="token operator">::</span>searchText<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>希望看完这三章你能有些许收获。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://medium.com/grand-parade/6-magic-sugars-that-can-make-your-kotlin-codebase-happier-part-3-6319a451cd5d" target="_blank" rel="noopener">6 magic sugars that can make your Kotlin codebase happier — Part 3</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语法糖 Part2</title>
      <link href="/2019/03/30/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part2/"/>
      <url>/2019/03/30/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一章中，我们学会了如何使用sealed classes，以及when()配合Pair或Triple使用做多重条件判断。  在这一章中，我想跟大家分享一下with()和inline reified的基本使用。  </p><h2 id="使用with-函数"><a href="#使用with-函数" class="headerlink" title="使用with()函数"></a>使用with()函数</h2><p>with()函数位于<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt" target="_blank" rel="noopener">Standard.kt</a>，是Kotlin标准函数之一，大家可以看看，掌握好这些函数对于我们简化编程有很大的帮助，有时间我会另开一章分享我平时使用到它们的地方，当然也非常欢迎大家评论分享使用技巧。<br>假设你从未使用过with()函数，我们可以先看看源码：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">with</span><span class="token punctuation">(</span>receiver<span class="token operator">:</span> T<span class="token punctuation">,</span> block<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R</code></pre><blockquote><p>Calls the specified function block with the given receiver as its receiver and returns its result.</p></blockquote><p>大体的意思是调用receiver中的方法然后返回它的结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> receiver<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Fructos"</span><span class="token keyword">val</span> block<span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">val</span> result<span class="token operator">:</span> Unit <span class="token operator">=</span> with<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Unit<span class="token operator">></span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//简化一下代码</span><span class="token function">with</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在block中你可以调用到receiver的方法而且不需要任何限定符，在block的最后返回你需要的数据类型就可以了。在项目中我经常使用它在p层传递限定符像是view.show(),view.hide()</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> View <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Presenter</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> view<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">present</span><span class="token punctuation">(</span>isFructos<span class="token operator">:</span>Boolean<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFructos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="inline-reified"><a href="#inline-reified" class="headerlink" title="inline reified"></a>inline reified</h2><p>我们先分析一下下面的代码</p><pre class=" language-kotlin"><code class="language-kotlin">abstact <span class="token keyword">class</span> Item<span class="token keyword">class</span> MediaItem<span class="token operator">:</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> media <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> IconItem<span class="token operator">:</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> icon <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">interface</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span>Item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> MediaItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!</span><span class="token keyword">is</span> MediaItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Item is not an instance of MediaItem"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        view<span class="token punctuation">.</span><span class="token function">showMedia</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>media<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> IconItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> Viewm<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!</span><span class="token keyword">is</span> IconItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Item is not an instance of IconItem"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        view<span class="token punctuation">.</span><span class="token function">showIcon</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>icon<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码有很多冗余的地方，其实很明显你就能看出MediaItemRenderer和IconItemRenderer在render()函数中存在着相同的逻辑，现在，我们用inline reified来改造它，首先将render函数中的逻辑提取出来：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">withCorrectType</span><span class="token punctuation">(</span>toBeChecked<span class="token operator">:</span> Item<span class="token punctuation">,</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>toBeChecked <span class="token operator">!</span><span class="token keyword">is</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid Type"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    block<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>toBeChecked<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然而，这样做并不能通过编译，会报错</p><blockquote><p>Cannot check for instance of erased type: T  </p></blockquote><p>产生这种错误是因为泛型机制。</p><blockquote><p>During the type erasure process, the Java compiler erases all type parameters and replaces each with its first bound if the type parameter is bounded,or Object if the type parameter is unbounded.-docs.oracle.com</p></blockquote><p>so, 可以防止防止泛型T被清除吗？在Kotlin中一切都有可能，使用inline reified，就能修复这个问题。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MediaItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        withCorrectType<span class="token operator">&lt;</span>MediaItem<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            show <span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> IconItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        withCorrectType<span class="token operator">&lt;</span>IconItem<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            show <span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span><span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">></span> <span class="token function">withCorrectType</span><span class="token punctuation">(</span>toBeChecked<span class="token operator">:</span> Item<span class="token punctuation">,</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>toBeChecked <span class="token operator">!</span><span class="token keyword">is</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    block<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>toBeChecked<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用reified修饰符Kotlin compiler保留了你的类型，当然这是必须在使用inline的前提下。</p><p>以上就是第二章的全部了，在第三章中我们将展示更多的Kotlin小技巧。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://medium.com/grand-parade/6-magic-sugars-that-can-make-your-kotlin-codebase-happier-part-2-843bf096fa45" target="_blank" rel="noopener">6 magic sugars that can make your Kotlin codebase happier — Part 2</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语法糖 Part1</title>
      <link href="/2019/03/23/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part1/"/>
      <url>/2019/03/23/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part1/</url>
      
        <content type="html"><![CDATA[<p>Kotlin给我们提供了大量的工具和语法糖让我们能够更为便利的去编程，让代码有更好的可读性和可扩展性。写更少的代码做更多的事，用这句话概括Kotlin和Java之间的差异一点都不为过。面对Kotlin这种能减轻我们工作量的工具，我们有什么理由不去学习它呢？我相信有效地使用Kotlin会对你的身心带来巨大的愉悦，在使用Kotlin的过程中，它的简洁和优雅的语法不断地给我带来惊喜，可能这也是Google使用它作为Android官方编程语言的原因吧。Kotlin的语法糖有很多，我至今也还在学习中，接下来我将用三篇文章的篇幅将目前我使用较多的介绍给大家。这篇文章是这个系列的第一章，在这张中我们主要来了解下密封类(sealed class)的用法。</p><h2 id="密封类-sealed-class"><a href="#密封类-sealed-class" class="headerlink" title="密封类(sealed class)"></a>密封类(sealed class)</h2><p>用sealed关键字修饰的类我们称之为密封类，在<a href="https://www.kotlincn.net/docs/reference/sealed-classes.html" target="_blank" rel="noopener">官方文档</a>中是这么介绍的  </p><blockquote><p>密封类用来表示受限的类继承结构，当一个值为有限集中的类型、而不能有任何其他类型。</p></blockquote><p>这是不是很枚举类很相似呢，我认为sealed class比枚举的用法更为灵活，每个枚举类只能存在一个实例，但是密封类的子类可以包含多个不同内部状态的实例。上代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">sealed</span> <span class="token keyword">class</span> Response<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Success</span><span class="token punctuation">(</span><span class="token keyword">val</span> body<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">object</span> Timeout<span class="token operator">:</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>sealed class 自身抽象，它不能直接实例化，但是可以有abstract成员。我们使用IntelliJ IDEA Kotlin Bytecode工具将上面的代码还原程Java代码。</p><p>1.Reveal Koltin Bytecode</p><p><img src="https://dreamweaver.img.we1code.cn/kotlin_syntax_pic_2.png" alt="pic_1" title="1.Reveal Kotlin Bytecode"></p><p>2.Decompile Kotlin Bytecode to Java code</p><p><img src="https://dreamweaver.img.we1code.cn/kotlin_syntax_pic_1.png" alt="pic_2" title="2.Decompile Kotlin Bytecode to Java code"></p><p>经过这几步，就可以开始阅读转换后Java代码了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// $FF: synthetic method</span>   <span class="token keyword">public</span> <span class="token function">Response</span><span class="token punctuation">(</span>DefaultConstructorMarker $constructor_marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你可能已经在想，seald classes专门为继承而生，因此他们是抽象的。但是，他们怎么会类似enums?下面是Kotlin编译器通过允许您使用Response类的子类作为(as case of)when（）函数的条件时给您带来巨大帮助的时候了。另外，kotlin提供了极大的灵活性(flexibility)，继承sealed class的对象可以<br>是一个data class(数据类)或object</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sugar</span><span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Success <span class="token operator">-></span> <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token keyword">is</span> Error <span class="token operator">-></span> <span class="token operator">..</span><span class="token punctuation">.</span>    Timeout <span class="token operator">-></span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这样的代码看上去不仅仅是结构清晰，在使用它时，你甚至不用去做额外的强制转换，在条件语句的最后也不再需要else子句了，我们已经覆盖了所有的情况。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sugar</span><span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Success <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token keyword">is</span> Error <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>response<span class="token punctuation">.</span>code<span class="token delimiter variable">}</span></span> <span class="token interpolation"><span class="token delimiter variable">${</span>response<span class="token punctuation">.</span>message<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    Timeout <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>不使用sealed关键字的代码是怎样的？可以用IntelliJ IDEA Kotlin Bytecode转换成Java看下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sugar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Intrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String var3<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">Success</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      var3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Success<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      var3 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Intrinsics<span class="token punctuation">.</span><span class="token function">areEqual</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> Timeout<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoWhenBranchMatchedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      var3 <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可见使用Kotlin我们减少了多少代码量。</p><h2 id="使用when-方法自由的排列组合"><a href="#使用when-方法自由的排列组合" class="headerlink" title="使用when()方法自由的排列组合"></a>使用when()方法自由的排列组合</h2><p>接下来我们看看枚举类和when()的配合。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">enum</span> <span class="token keyword">class</span> Employee <span class="token punctuation">{</span>    DEV_LEAD<span class="token punctuation">,</span>    SENIOR_ENGINEER<span class="token punctuation">,</span>    REGULAR_ENGINEER<span class="token punctuation">,</span>    JUNIOR_ENGINEER<span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token keyword">class</span> Contract <span class="token punctuation">{</span>    PROBATION<span class="token punctuation">,</span>    PERMANENT<span class="token punctuation">,</span>    CONTRACTOR<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Employee枚举定义了Company中的所有角色，Contract枚举包含了所有类型的员工合同。通过这两个枚举的排列组合我们要返回正确的SafariBookAccess。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">,</span>           contract<span class="token operator">:</span> Contract<span class="token punctuation">)</span><span class="token operator">:</span> SafariBookAccess</code></pre><p>然后用定义SafariBooksAccess</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">sealed</span> <span class="token keyword">class</span> SafariBookAccess<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token keyword">val</span> expirationDate<span class="token operator">:</span> DateTime<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">SafariBookAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token keyword">val</span> error<span class="token operator">:</span> AssertionError<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">SafariBookAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">SafariBookAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在access()方法中做排列组合</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">,</span>           contract<span class="token operator">:</span> Contract<span class="token punctuation">)</span><span class="token operator">:</span> SafariBookAccess <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SENIOR_ENGINEER <span class="token operator">-></span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PROBATION <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PERMANENT <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            CONTRACTOR <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        REGULAR_ENGINEER <span class="token operator">-></span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PROBATION <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PERMANENT <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            CONTRACTOR <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access blocked for <span class="token interpolation variable">$contract</span>."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        JUNIOR_ENGINEER <span class="token operator">-></span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PROBATION <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PERMANENT <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access blocked for <span class="token interpolation variable">$contract</span>."</span><span class="token punctuation">)</span>            CONTRACTOR <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access blocked for <span class="token interpolation variable">$contract</span>."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>emm，这样写不够简洁，上述代码存在以下问题：</p><ul><li>过多的when()方法。可以用Pair避免嵌套(nesting)</li><li>改变枚举类参数的顺序，使用Pair&lt;Contract, Employee&gt;()提高可读性</li><li>将返回相同的case合并</li><li>改为单表达式函数(<a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions" target="_blank" rel="noopener">Single-Expression functions</a>)</li></ul><p>然后，我们来改造一下这段代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>contract<span class="token operator">:</span> Contract<span class="token punctuation">,</span>           employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span>contract<span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PROBATION<span class="token punctuation">,</span> SENIOR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PROBATION<span class="token punctuation">,</span> REGULAR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PROBATION<span class="token punctuation">,</span> JUNIOR_ENGINEER<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PERMANENT<span class="token punctuation">,</span> SENIOR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PERMANENT<span class="token punctuation">,</span> REGULAR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PERMANENT<span class="token punctuation">,</span> JUNIOR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>CONTRACTOR<span class="token punctuation">,</span> SENIOR_ENGINEER<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>CONTRACTOR<span class="token punctuation">,</span> REGULAR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>CONTRACTOR<span class="token punctuation">,</span> JUNIOR_ENGINEER<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access for junior contractors is blocked."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Unsupported case of <span class="token interpolation variable">$employee</span> and <span class="token interpolation variable">$contract</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>现在看上去是不是很简洁了，但是还能更加简洁：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>contract<span class="token operator">:</span> Contract<span class="token punctuation">,</span>           employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract <span class="token keyword">to</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PROBATION <span class="token keyword">to</span> SENIOR_ENGINEER<span class="token punctuation">,</span>    PROBATION <span class="token keyword">to</span> REGULAR_ENGINEER <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    PERMANENT <span class="token keyword">to</span> SENIOR_ENGINEER<span class="token punctuation">,</span>    PERMANENT <span class="token keyword">to</span> REGULAR_ENGINEER<span class="token punctuation">,</span>    PERMANENT <span class="token keyword">to</span> JUNIOR_ENGINEER<span class="token punctuation">,</span>    CONTRACTOR <span class="token keyword">to</span> SENIOR_ENGINEER <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    CONTRACTOR <span class="token keyword">to</span> REGULAR_ENGINEER<span class="token punctuation">,</span>    PROBATION <span class="token keyword">to</span> JUNIOR_ENGINEER<span class="token punctuation">,</span>    CONTRACTOR <span class="token keyword">to</span> JUNIOR_ENGINEER <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access for junior contractors is blocked."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Unsupported case of <span class="token interpolation variable">$employee</span> and <span class="token interpolation variable">$contract</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>希望这些语法糖能对你有所帮助，剩下的我们将在Part2中讲解。</p><p>转自 <a href="https://medium.com/grand-parade/6-magic-sugars-that-can-make-your-kotlin-codebase-happier-part-1-ceee3c2bc9d3" target="_blank" rel="noopener">Piotr Ślesarew @ Medium 6 magic sugars that can make your Kotlin codebase happier — Part 1</a><br>编写 <a href="http://we1code.cn/me">snoopy@we1code.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Lambda and Extension</title>
      <link href="/2019/03/22/kotlin%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
      <url>/2019/03/22/kotlin%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Extension-Function"><a href="#Extension-Function" class="headerlink" title="Extension Function"></a>Extension Function</h3><blockquote><p>Extension Function 能在已经存在的类中添加新的方法或者属性，即使这些类来自库或者SDK中。在函数内部，我们可以访问类的公共函数和属性而不需要任何限定符，就好像这个函数就在这个类的内部一样。（注意：从技术上将，它并没有修改现有类，只是在声明的类中创建了static public final函数）</p></blockquote><p>举个栗子</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> KotMain <span class="token punctuation">{</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token string">"snoopy"</span>        person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>sth<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$this</span> say <span class="token interpolation variable">$sth</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>反编译后我们可以看到生成的java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KotMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> KotMain INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Instrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"args"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String person <span class="token operator">=</span> <span class="token string">"snoopy"</span><span class="token punctuation">;</span>        INSTANCE<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> String $<span class="token keyword">this</span>$say<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> String sth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Instrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>$<span class="token keyword">this</span>$say<span class="token punctuation">,</span> <span class="token string">"$this$say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Instrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>sth<span class="token punctuation">,</span> <span class="token string">"sth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String var3 <span class="token operator">=</span> $<span class="token keyword">this</span>$say <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> sth<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到只是增加了一个final方法。</p><p>接下来看看如何在Android项目中运用它</p><ul><li><p>可以生成任何Android View实例的函数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span><span class="token operator">&lt;</span><span class="token keyword">reified</span> V<span class="token operator">:</span> View<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> <span class="token keyword">init</span><span class="token operator">:</span> V<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> V<span class="token punctuation">{</span>    <span class="token keyword">val</span> instance <span class="token operator">=</span> V<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>context<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">val</span> view <span class="token operator">=</span> instace<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    view<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> view<span class="token punctuation">}</span></code></pre></li><li><p>dp-px拓展</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span>dp<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> TypedValue<span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> context<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>displayMetrics<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>添加fragment</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> FragmentManager<span class="token punctuation">.</span><span class="token function">inTransaction</span><span class="token punctuation">(</span>func<span class="token operator">:</span> FragmentTransaction<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> fragmentTransaction <span class="token operator">=</span> <span class="token function">begainTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fragmentTransaction<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fragmentTransaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用</span>supportFragmentManager<span class="token punctuation">.</span><span class="token function">inTransaction</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>container<span class="token punctuation">,</span> fragment<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//other operation</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="High-Order-Function"><a href="#High-Order-Function" class="headerlink" title="High Order Function"></a>High Order Function</h3><p>High Order Function 在 kotlin 的官网中有很明确的解释:</p><blockquote><p><a href="https://kotlinlang.org/docs/reference/lambdas.html#higher-order-functions" target="_blank" rel="noopener">Higher-Order Functions</a><br>A higher-order function is a function that takes functions as parameters, or returns a function.<br>高阶函数是将函数作为参数或返回函数的函数。</p></blockquote><p>High Order Function 中函数作为参数的情况</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">test1</span><span class="token punctuation">(</span>func<span class="token operator">:</span>Int<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> Int<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span>func<span class="token operator">:</span>Int<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> $<span class="token keyword">this</span>$test1<span class="token punctuation">,</span> Function1 call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    call<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>$<span class="token keyword">this</span>$test<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span>Function1 call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    call<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Lambda-with-Receiver"><a href="#Lambda-with-Receiver" class="headerlink" title="Lambda with Receiver"></a>Lambda with Receiver</h3><p>什么是Lambda with Receiver? Extension Function + Lambda = Lambda with Receiver，它允许你在没有任何限定符的情况下调用lambda中对象的方法。</p><h3 id="inline-function"><a href="#inline-function" class="headerlink" title="inline function"></a>inline function</h3><p>在kotlin中，函数是一等公民，所以我们可以传递函数或者像其它普通类型一样返回它们。然而，这些函数在运行时可能会产生一些性能上的问题，它们作为对象存储造成了额外的内存开销，这时候就轮到inline登场了，在一些使用High Order Function的场景中，我们一般用inline（内联）去修饰它，这样可以减少调用开销。我们依然从源码出发，通过反编译，看看使用High Order Function编译成Java是什么样子的。  </p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> KotMain <span class="token punctuation">{</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        noInline <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        inlineFunc <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">noInline</span><span class="token punctuation">(</span>call<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">inlineFunc</span><span class="token punctuation">(</span>call<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再来看看java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KotMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> KotlinMain INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//no inline</span>        INSTANCE<span class="token punctuation">.</span><span class="token function">noInline</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//inline</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">noInline</span><span class="token punctuation">(</span>Function func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        func<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>大家可以非常直观的看到结论，不使用内联修饰符，每次调用这个函数都会初始化一个Function实例，显然会造成内存开销，而使用内联修饰符，不会创建Function实例，而会将回调函数内部的代码复制到call site中。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://www.jianshu.com/p/7496715ba2fd" target="_blank" rel="noopener">kotlin-extension function</a><br><a href="http://hengyunabc.github.io/kotlin-extension-functions/" target="_blank" rel="noopener">Kotlin里的Extension Functions实现原理分析</a><br><a href="https://medium.com/thoughts-overflow/how-to-add-a-fragment-in-kotlin-way-73203c5a450b" target="_blank" rel="noopener">How to Add a Fragment the Kotlin way</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> syntax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android代码混淆</title>
      <link href="/2018/05/29/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
      <url>/2018/05/29/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用Kotlin撸App，准备发版了，做下代码混淆，想用原来的混淆逻辑，但是发现各种报错，头大的很，觉得是自己关于混淆的知识积累不够多，是应该系统的学习一下了！顺便在此记录下遇到的坑。那下面我们开始吧。</p><h2 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h2><h3 id="开启代码混淆"><a href="#开启代码混淆" class="headerlink" title="开启代码混淆"></a>开启代码混淆</h3><p>只要在app.gradle文件下配置proguardFiles</p><pre class=" language-groovy"><code class="language-groovy">    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//是否开启混淆</span>            zipAlignEnabled <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//对齐zip</span>            debuggable <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 是否debug</span>            versionNameSuffix <span class="token string">"_release"</span> <span class="token comment" spellcheck="true">// 版本命名后缀</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span> <span class="token comment" spellcheck="true">// 混淆文件</span>            signingConfig signingConfigs<span class="token operator">.</span>release        <span class="token punctuation">}</span>        <span class="token punctuation">...</span>    <span class="token punctuation">}</span></code></pre><p>proguard-android.txt 是android自带的混淆规则，我们只需要在proguard-rules.pro这个文件中配置我么的混淆规则就可以了。</p><h3 id="Proguard混淆流程"><a href="#Proguard混淆流程" class="headerlink" title="Proguard混淆流程"></a>Proguard混淆流程</h3><p><img src="https://dreamweaver.img.we1code.cn/proguard%E6%B7%B7%E6%B7%86%E6%B5%81%E7%A8%8B.jpg" alt="proguard混淆流程" title="proguard混淆流程"></p><ul><li>压缩（shrink）：检测并移除代码中无用的类、字段、方法和特性</li><li>优化（optimize）：对字节码进行优化，移除无用指令</li><li>混淆（obfuscate）：使用a，b，c，d这样简短而无意义的名称，对类、字段和方法进行重命名</li><li>预检（preveirfy）：在java平台上对处理后的代码进行预检，确保加载的class文件时可执行的</li></ul><h3 id="混淆规则"><a href="#混淆规则" class="headerlink" title="混淆规则"></a>混淆规则</h3><table><thead><tr><th>Proguard关键字</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>keep</td><td style="text-align:center">保留类和类中的成员，防止被混淆或移除</td></tr><tr><td>keepnames</td><td style="text-align:center">保留类和类中的成员，防止被混淆，成员没有被引用会被移除</td></tr><tr><td>keepclassmembers</td><td style="text-align:center">只保留类中的成员，防止被混淆或移除</td></tr><tr><td>keepclassmembernames</td><td style="text-align:center">只保留类中的成员，防止被混淆，成员没有引用会被移除</td></tr><tr><td>keepclasseswithmembers</td><td style="text-align:center">保留类和类中的成员，防止被混淆或移除，保留指明的成员，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。</td></tr><tr><td>keepclasseswithmembernames</td><td style="text-align:center">保留类和类中的成员，防止被混淆，保留指明的成员，成员没有引用会被移除，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。</td></tr></tbody></table><table><thead><tr><th>通配符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>field</td><td style="text-align:center">匹配类中的所有字段</td></tr><tr><td>method</td><td style="text-align:center">匹配类中的所有方法</td></tr><tr><td>init</td><td style="text-align:center">匹配类中的所有构造函数</td></tr><tr><td>*</td><td style="text-align:center">匹配任意长度字符，但不含包名分隔符（.）。</td></tr><tr><td>**</td><td style="text-align:center">匹配任意长度字符，并且包含包名分隔符（.）。</td></tr><tr><td>***</td><td style="text-align:center">匹配任意参数类型</td></tr><tr><td>…</td><td style="text-align:center">匹配任意长度任意类型参数</td></tr></tbody></table><p>举例：<br>我们完整的包名是com.xxx.ui.MainAct，使用com.*或者<code>com.xxx.\*</code>都是无法匹配的，正确的写法是<code>com.xxx.\*.\*，</code>或者<code>com.xxx.ui.*</code></p><h3 id="避免混淆的因素"><a href="#避免混淆的因素" class="headerlink" title="避免混淆的因素"></a>避免混淆的因素</h3><ul><li>native method：因为native是根据方法名去调用的，若混淆后会导致找不到此方法名。</li><li>反射相关的方法和类：反射原理就是通过方法名和类名去实例化相应的对象，调用相关的方法。</li><li>setXX和getXX方法：这里指的是通过配置文件直接生成相应的set和get方法的相关库，所以javaBean类很多情况下不能做混淆。</li><li>第三方jar包：这个需要具体情况具体分析，很多库都会提供默认的混淆配置，大多数情况可以不用做混淆。</li></ul><h3 id="处理混淆失败问题"><a href="#处理混淆失败问题" class="headerlink" title="处理混淆失败问题"></a>处理混淆失败问题</h3><p>通常混淆失败导致gradle构建项目失败，原因在输出的错误日志上并不明显，我们可以在Build Output中找到构建出错的task，例如我构建失败的任务是transformClassesAndResourcesWithProguardForBaiduRelease，因此我可以执行</p><pre class=" language-groovy"><code class="language-groovy">gradlew transformClassesAndResourcesWithProguardForBaiduRelease <span class="token operator">--</span> stacktrace</code></pre><p>这样我们就能在shell中看清楚到底是什么地方出错啦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.guardsquare.com/en/products/proguard/manual/troubleshooting#descriptorclass" target="_blank" rel="noopener">ProGuard manual</a><br><a href="https://www.jianshu.com/p/b5b2a5dfaaf4" target="_blank" rel="noopener">Android混淆</a><br><a href="https://www.jianshu.com/p/86ee6ef970ef" target="_blank" rel="noopener">Android 代码混淆零基础入门</a><br><a href="https://www.jianshu.com/p/b471db6a01af" target="_blank" rel="noopener">ProGuard 最全混淆规则说明</a><br><a href="https://blog.csdn.net/youyu_torch/article/details/78775100?utm_source=blogxgwz3" target="_blank" rel="noopener">Android 混淆：proguard实践</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins自动打包Android应用</title>
      <link href="/2018/04/28/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
      <url>/2018/04/28/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经用Jenkins做过很多Android自动化打包的配置了，无奈记性不咋地，每配一次就要查一次资料，踩同样的坑，浪费不少时间和精力，更是被一些莫名其妙的问题折磨到抓狂，于是我决定在此把Jenkins的配置流程和遇到的坑整理、记录下来（其实早就想这么做了，但是懒癌晚期），方便以后做一些查阅。</p><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h3><p>在系统管理中做全局工具配置，如下图<br><img src="https://dreamweaver.img.we1code.cn/optional1.png" alt="全局工具配置"><br>配置 JAVA_HOME、GRADLE_HOME 指向JDK的安装目录和Gradle的解压目录，然后配置Jenkins的全局变量，这里我配置了python的路径，GRADLE_USER_HOME，这个变量用作gradle的缓存目录，还配置了ANDROID_HOME指向AndroidSdk的目录。</p><h3 id="基础工程配置"><a href="#基础工程配置" class="headerlink" title="基础工程配置"></a>基础工程配置</h3><p>基础工程配置分为配置构建参数、源码管理、配置触发器、配置构建工具、构建后的一些操作</p><h3 id="构建任务重命名"><a href="#构建任务重命名" class="headerlink" title="构建任务重命名"></a>构建任务重命名</h3><p><img src="https://dreamweaver.img.we1code.cn/%E4%BB%BB%E5%8A%A1%E9%87%8D%E5%91%BD%E5%90%8D.png" alt="重命名"></p><h3 id="配置构建参数"><a href="#配置构建参数" class="headerlink" title="配置构建参数"></a>配置构建参数</h3><p>选择参数化构建过程&gt;选项参数<br><img src="https://dreamweaver.img.we1code.cn/jenkins02.jpg" alt="构建参数"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>选择git作为版本控制工具<br><img src="https://dreamweaver.img.we1code.cn/jenkins03.png" alt="源码管理"></p><h3 id="配置触发器"><a href="#配置触发器" class="headerlink" title="配置触发器"></a>配置触发器</h3><p>解释下触发器的各个选项</p><blockquote><p>触发远程构建 (例如,使用脚本)<br>GitHub hook trigger for GITScm polling<br>其他工程构建后触发<br>定时构建<br>Help for feature: 定时构建  </p></blockquote><h4 id="轮询-SCM"><a href="#轮询-SCM" class="headerlink" title="轮询 SCM"></a>轮询 SCM</h4><p>格式为 <em> </em> <em> </em> *<br>第一个星号表示分钟，取值0~59<br>第二个星号表示小时，取值0~23<br>第三个星号表示一个月内的天数，取值1~31<br>第四个星号表示第几个月，取值1~12<br>第五个星号表示一周的第几天，取值0~7</p><h3 id="多渠道打包配置"><a href="#多渠道打包配置" class="headerlink" title="多渠道打包配置"></a>多渠道打包配置</h3><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p><img src="https://dreamweaver.img.we1code.cn/Jenkins%E6%89%93%E5%8C%85%E6%B8%A0%E9%81%93%E5%8F%B7%E9%85%8D%E7%BD%AE.jpg" alt="添加渠道选项参数"></p><h4 id="接入友盟"><a href="#接入友盟" class="headerlink" title="接入友盟"></a>接入<a href="https://developer.umeng.com/docs/66632/detail/101848" target="_blank" rel="noopener">友盟</a></h4><pre class=" language-groove"><code class="language-groove">//build.gradle 配置    productFlavors {        yingyongbao {        }        huawei {        }    }    productFlavors.all { flavor ->        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]    }</code></pre><h3 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h3><p>我在项目使用的是乐固加固，首先去下载他们的<a href="https://leguimg.qcloud.com/ms-client/java-tool/1.0.3/ms-shield.jar" target="_blank" rel="noopener">jar包</a>。进入项目配置文件开始配置：  </p><p>配置构建后操作，执行打包后再执行加固，如下图：<br><img src="https://dreamweaver.img.we1code.cn/%E5%8A%A0%E5%9B%BA%E6%AD%A5%E9%AA%A41.jpg" alt="加固步骤1"></p><p>接下来转到加固项目的配置中，可以将下载下来的jar包做版本管理，也可以直接放在项目根目录中，配置构建步骤：<br><img src="https://dreamweaver.img.we1code.cn/%E5%8A%A0%E5%9B%BA%E6%AD%A5%E9%AA%A42.jpg" alt="加固步骤2"></p><h3 id="再签名"><a href="#再签名" class="headerlink" title="再签名"></a>再签名</h3><p>然鹅加固完之后并没有结束，需要进行再签名，</p><blockquote><p><a href="https://cloud.tencent.com/document/product/283/3271" target="_blank" rel="noopener">加固过程不可避免的会破坏签名，因此加固后的包需重签名，未签名应用将无法顺利安装。</a></p></blockquote><p>这里我是又另外建了一个项目，应该还有比较好的做法比如构建后执行什么的(需要另装插件)  </p><p>主要看看签名脚本是怎么写的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用apksiger命令为apk签名'</span><span class="token punctuation">)</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span>jks_file <span class="token operator">=</span> Noneapk_file <span class="token operator">=</span> None<span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">if</span> file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jks'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        jks_file <span class="token operator">=</span> file    <span class="token keyword">elif</span> file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        apk_file <span class="token operator">=</span> file    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">if</span> jks_file <span class="token operator">==</span> None <span class="token operator">or</span> apk_file <span class="token operator">==</span> None<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前目录不存在签名文件或者apk文件，请确认签名文件在当前目录下'</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>file_name<span class="token operator">=</span>apk_filezipalign_name<span class="token operator">=</span>file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'_zipalign.apk'</span>command<span class="token operator">=</span><span class="token string">'zipalign -v -p 4 {0} {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> zipalign_name<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>jks_name<span class="token operator">=</span>jks_filekey_alias <span class="token operator">=</span> <span class="token string">'bonadeTravel'</span>ks_pass <span class="token operator">=</span> <span class="token string">'bonadetravel888'</span>key_pass <span class="token operator">=</span> <span class="token string">'bonadetravel888'</span>apk_name<span class="token operator">=</span>zipalign_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'_signed.apk'</span>command<span class="token operator">=</span><span class="token string">'apksigner sign --ks {0} --ks-key-alias {1} --ks-pass pass:{2} --key-pass pass:{3} --out {4} {5}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>jks_name<span class="token punctuation">,</span> key_alias<span class="token punctuation">,</span> ks_pass<span class="token punctuation">,</span> key_pass<span class="token punctuation">,</span> apk_name<span class="token punctuation">,</span> zipalign_name<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span></code></pre><h3 id="执行构建脚本"><a href="#执行构建脚本" class="headerlink" title="执行构建脚本"></a>执行构建脚本</h3><pre class=" language-groovy"><code class="language-groovy">cleanassemble<span class="token punctuation">$</span><span class="token punctuation">{</span>channel<span class="token punctuation">}</span><span class="token punctuation">$</span><span class="token punctuation">{</span>buildType<span class="token punctuation">}</span> <span class="token operator">--</span>stacktrace<span class="token comment" spellcheck="true">//如果需要打所有渠道包</span>assemble<span class="token punctuation">$</span><span class="token punctuation">{</span>buildType<span class="token punctuation">}</span> <span class="token operator">--</span>stacktrace</code></pre><h3 id="构建后的操作"><a href="#构建后的操作" class="headerlink" title="构建后的操作"></a>构建后的操作</h3><p>构建完成后的操作:  </p><ol><li>提取apk文件</li><li>上传到蒲公英</li><li>jenkins中生成二维码</li><li>通知测试人员</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>想修改一下apk文件输出目录，于是修改build.gradle  </p><pre class=" language-groovy"><code class="language-groovy">applicationVariants<span class="token operator">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-></span>    variant<span class="token operator">.</span>outputs<span class="token operator">.</span>each <span class="token punctuation">{</span> output <span class="token operator">-></span>        <span class="token keyword">def</span> outputFile <span class="token operator">=</span> output<span class="token operator">.</span>outputFile        <span class="token keyword">if</span> <span class="token punctuation">(</span>outputFile <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> outputFile<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>outputFile<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">def</span> fileName <span class="token operator">=</span> outputFile<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".apk"</span><span class="token punctuation">,</span> <span class="token string">"-${defaultConfig.versionName}.apk"</span><span class="token punctuation">)</span>                output<span class="token operator">.</span>outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\user\\Desktop\\apk\\${defaultConfig.versionName}"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在4.0+gradle方法稍有不同</p><pre class=" language-groovy"><code class="language-groovy">applicationVariants<span class="token operator">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-></span>    variant<span class="token operator">.</span>outputs<span class="token operator">.</span>all <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义输出路径 但是getPackageApplication()将在19年底被移除</span>        variant<span class="token operator">.</span><span class="token function">getPackageApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>outputDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>project<span class="token operator">.</span>rootDir<span class="token operator">.</span>absolutePath <span class="token operator">+</span> File<span class="token operator">.</span>separator <span class="token operator">+</span> <span class="token string">"outputs"</span><span class="token punctuation">)</span>        outputFileName <span class="token operator">=</span> <span class="token string">"AppName-${variant.flavorName}-${variant.buildType.name}-v${variant.versionName}_${time()}.apk"</span>    <span class="token punctuation">}</span></code></pre><p>最终版本</p><pre class=" language-groovy"><code class="language-groovy">applicationVariants<span class="token operator">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-></span>    variant<span class="token operator">.</span>outputs<span class="token operator">.</span>all <span class="token punctuation">{</span>        <span class="token keyword">def</span> newName        <span class="token keyword">def</span> timeNow        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"true"</span><span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span>IS_JENKINS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            timeNow <span class="token operator">=</span> JENKINS_TIME            variant<span class="token operator">.</span>packageApplicationProvider<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>outputDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>project<span class="token operator">.</span>rootDir<span class="token operator">.</span>absolutePath <span class="token operator">+</span> File<span class="token operator">.</span>separator <span class="token operator">+</span> <span class="token string">"apks"</span><span class="token punctuation">)</span>            newName <span class="token operator">=</span> <span class="token string">"xxx-v${APP_VERSION}-${timeNow}-${variant.buildType.name}.apk"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            timeNow <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variant<span class="token operator">.</span>buildType<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                newName <span class="token operator">=</span> <span class="token string">"xxx-v${APP_VERSION}-debug.apk"</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                newName <span class="token operator">=</span> <span class="token string">"xxx-v${APP_VERSION}-${timeNow}-${variant.buildType.name}.apk"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        outputFileName <span class="token operator">=</span> <span class="token string">"${newName}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="在jenkins中编译的时候报错找不到abc-ab-share-pack-mtrl-alpha-9-png"><a href="#在jenkins中编译的时候报错找不到abc-ab-share-pack-mtrl-alpha-9-png" class="headerlink" title="在jenkins中编译的时候报错找不到abc_ab_share_pack_mtrl_alpha.9.png"></a>在jenkins中编译的时候报错找不到abc_ab_share_pack_mtrl_alpha.9.png</h3><p><img src="https://dreamweaver.img.we1code.cn/jenkins04.png" alt="error"><br>wtf没见过这种错误啊，我估摸着会不会是路径太长的原因，于是在gradle.properties中配置了android.buildCacheDir=F\://androidCache，但是，并没有卵用，秉承着不解决问题不罢休的态度，我又浪费了一个下午。终于，在stackoverflow上，看到有个哥们提到在jenkins中设置GRADLE_USER_HOME这个环境变量，随便指向一个目录。然后就不报错了。我的内心是崩溃的，好吧，总算是解决了，但是为什么AndroidStudio下编译就不会报错呢。</p><h3 id="com-sun-org-apache-xerces-internal-impl-io-MalformedByteSequenceException-3-字节的-UTF-8-序列的字节-3-无效"><a href="#com-sun-org-apache-xerces-internal-impl-io-MalformedByteSequenceException-3-字节的-UTF-8-序列的字节-3-无效" class="headerlink" title="com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: 3 字节的 UTF-8 序列的字节 3 无效"></a>com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: 3 字节的 UTF-8 序列的字节 3 无效</h3><p>又碰到一个奇怪的问题，这个坑是databinding框架产生的，由于我是在linux上开发的，jenkins环境部署在本地的windows上，在xml中databinding的表达式中如果出现了中文字符，就会报编码错误，于是我只能硬着头皮修改布局文件，把中文字符移到资源文件中。</p><h3 id="开启混淆后报错，proguard-rules-pro文件配置出错"><a href="#开启混淆后报错，proguard-rules-pro文件配置出错" class="headerlink" title="开启混淆后报错，proguard-rules.pro文件配置出错"></a>开启混淆后报错，proguard-rules.pro文件配置出错</h3><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">Execution</span> failed for task ':app:transformClassesAndResourcesWithProguardForRelease'.</span></code></pre><p>通过执行</p><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">gradlew</span> <span class="token parameter attr-name">--stacktrace</span> task xxx</span></code></pre><p>可以看到具体的报错信息，主要是不能混淆的文件没有忽略掉，逐个干掉就行了。</p><h3 id="jenkins使用不了系统的环境变量"><a href="#jenkins使用不了系统的环境变量" class="headerlink" title="jenkins使用不了系统的环境变量"></a>jenkins使用不了系统的环境变量</h3><p>配置一下jenkins的环境变量然后重启生效</p><p><img src="https://dreamweaver.img.we1code.cn/%E9%85%8D%E7%BD%AEJenkins%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="环境变量配置"></p><h3 id="jenkins控制台出现中文乱码"><a href="#jenkins控制台出现中文乱码" class="headerlink" title="jenkins控制台出现中文乱码"></a>jenkins控制台出现中文乱码</h3><p>jenkins环境变量中添加 key: LANG value: zh.CH.UTF-8</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.aoaoyi.com/archives/1126.html" target="_blank" rel="noopener">用apksigner进行批量签名的脚本</a><br><a href="https://cloud.tencent.com/developer/article/1135340" target="_blank" rel="noopener">乐固加固FAQ</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面记录的问题只不过是诸多问题的冰山一角，以后我遇到的jenkins相关的问题都会记录于此。想要熟练运用Android打包，看样子还是要深入研究一下gradle才行呐。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
