<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Android存储系统</title>
      <link href="/2020/04/01/Android%E5%AD%98%E5%82%A8/"/>
      <url>/2020/04/01/Android%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>Android中的存储目录分为三块，内部存储，外部存储，系统存储目录</p><p><img src="https://dreamweaver.img.we1code.cn/android%E5%AD%98%E5%82%A8%E7%9B%AE%E5%BD%95.jpg" alt="图来自https://juejin.im/post/5de7772af265da3398561133#heading-16侵删"></p><a id="more"></a><h3 id="内部存储"><a href="#内部存储" class="headerlink" title="内部存储"></a>内部存储</h3><p>对于设备之每一个安装的APP都会在data/data/packagename/xxx目录下创建与之对应的文件夹，默认只能被此APP访问，当应用被卸载时，内部存储中的文件也会被删除。</p><p>根据手机厂商的不同，路径可能为</p><ul><li>data/data/packagename/xxx</li><li>data/user/0/packagename/xxx</li></ul><p>获取方法</p><pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getFileDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// data/data/packagename/files</span>context<span class="token punctuation">.</span><span class="token function">getCacheDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// data/data/packagename/cache 当内存不足时会被优先删除</span></code></pre><h3 id="外部存储"><a href="#外部存储" class="headerlink" title="外部存储"></a>外部存储</h3><p>分为两部分</p><ul><li>SD卡，应用被卸载后，</li><li>扩展卡内存，在APP被卸载后，这些文件也会被删除</li></ul><p>文件路径为</p><ul><li>扩展卡外部存储的路径 /storage/emulated/0/Android/data/packagename/xxx</li><li>SD卡外部存储的路径 /storage/extSdCard/Android/data/packagename/xxx</li></ul><p>获取方法</p><p>以下的type类型为</p><blockquote><p>DIRECTORY_MUSIC  音乐目录<br>DIRECTORY_PICTURES  图片目录<br>DIRECTORY_MOVIES  电影目录<br>DIRECTORY_DOWNLOADS  下载目录<br>DIRECTORY_DCIM   相机拍照或录像文件的存储目录<br>DIRECTORY_DOCUMENTS   文件文档目录  </p></blockquote><pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getExternalCacheDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /storage/emulated/0/Android/data/packagename/cache</span>context<span class="token punctuation">.</span><span class="token function">getExternalFilesDir</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /storage/emulated/0/Android/data/packagename/files</span>context<span class="token punctuation">.</span><span class="token function">getExternalStorageDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /storage/emulated/0</span>context<span class="token punctuation">.</span><span class="token function">getExternalStoragePublicDirectory</span><span class="token punctuation">(</span>String type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// SD卡外部存储可以通过Environment获取，获取之前要先判断SD是否存在</span><span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> Build<span class="token punctuation">.</span>VERSION_CODES<span class="token punctuation">.</span>KITKAT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            File<span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> <span class="token function">getExternalFilesDirs</span><span class="token punctuation">(</span>Environment<span class="token punctuation">.</span>MEDIA_MOUNTED<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>File file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"file_dir"</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="系统目录"><a href="#系统目录" class="headerlink" title="系统目录"></a>系统目录</h3><pre class=" language-java"><code class="language-java">context<span class="token punctuation">.</span><span class="token function">getRootDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /system</span>context<span class="token punctuation">.</span><span class="token function">getDataDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /data</span>context<span class="token punctuation">.</span><span class="token function">getDownloadCacheDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// /cache</span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://juejin.im/post/5de7772af265da3398561133">一篇文章搞懂android存储目录结构</a><br>作者：crazyandcoder</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arouter 原理浅析</title>
      <link href="/2019/12/08/Arouter/"/>
      <url>/2019/12/08/Arouter/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>想必大家都是用过arouter框架了，可以说arouter被广泛应用在组件化场景中，作为组件之间跳转的基石。在这篇中，我将主要分析arouter实现的原理，包括如何apt的部分以及使用时跳转的部分。</p><a id="more"></a><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><p><img src="https://dreamweaver.img.we1code.cn/arouter1.jpg" alt="项目结构"></p><ul><li>与注解相关</li><li>arouter核心代码，读取apt生成的文件，api相关</li><li>apt注解相关，提取注解信息生成java文件</li><li>gradle 插件</li><li>ide插件</li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分析先从注解类开始入手，再分析apt提取注解信息逻辑，这部分包括android processor使用方法，以及java poet的基本使用方法，最后也是最简单的就是arouter-api这部分。</p><h3 id="arouter基本注解类型"><a href="#arouter基本注解类型" class="headerlink" title="arouter基本注解类型"></a>arouter基本注解类型</h3><p><img src="https://dreamweaver.img.we1code.cn/arouter2.jpg" alt="基础注解类型"></p><ul><li>Autowired 变量相关(Param的替代，arouter跳转时携带的参数自动织入)</li><li>Interceptor 路由拦截器注解</li><li>Route 路由注解</li></ul><h3 id="相关注解处理器"><a href="#相关注解处理器" class="headerlink" title="相关注解处理器"></a>相关注解处理器</h3><p><img src="https://dreamweaver.img.we1code.cn/aouter3.jpg" alt="相关注解处理器"></p><p>注解器处理注解生成java模板代码，到这里需要了解一下apt的基础知识，自定义注解处理器一般需要依赖下面两个库:</p><pre class=" language-groovy"><code class="language-groovy">implementation <span class="token string">'com.google.auto.service:auto-service:1.0-rc3'</span>implementation <span class="token string">'com.squareup:javapoet:1.11.1'</span></code></pre><p>第一个主要用于注册自定义的注解处理器的，其本身也是一个注解处理器，一般来说注册自定义注解器需要将注解器的绝对路径写入如下目录结构的文件中</p><p><img src="https://dreamweaver.img.we1code.cn/router4.jpg" alt="注册处理器"></p><p>而第二个库主要是用于生成java文件的，apt与javapoet分章再讲，先看看arouter这几个注解的逻辑</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">process</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">TypeElement</span><span class="token operator">></span> set<span class="token punctuation">,</span> RoundEnvironment roundEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取所有被Autowired注解的element</span>            <span class="token function">categories</span><span class="token punctuation">(</span>roundEnvironment<span class="token punctuation">.</span><span class="token function">getElementsAnnotatedWith</span><span class="token punctuation">(</span>Autowired<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 生成模板java文件，详情可以去看arouter源码</span>            <span class="token function">generateHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 例子* s1被@Autowired注解，它的enclosingElement就是 A, parentAndChild收集的就是A中所有被 Autowired 注解的element**/</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    String s1<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    String s2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>InterceptorProcessor/RouteProcessor的处理逻辑则差不太多，都是先获得相应的注解类，然后生成java模板代码。</p><h3 id="模板代码的调用"><a href="#模板代码的调用" class="headerlink" title="模板代码的调用"></a>模板代码的调用</h3><p>模板代码的调用逻辑在arouter-api中，所有的路由/拦截器信息都存在warehouse中，我们使用Arouter时，首先需要调用</p><pre class=" language-java"><code class="language-java">Arouter<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>applicaiotn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">init</span><span class="token punctuation">(</span>Application application<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mContext <span class="token operator">=</span> application<span class="token punctuation">;</span>    LogisticsCenter<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>Consts<span class="token punctuation">.</span>TAG<span class="token punctuation">,</span> <span class="token string">"ARouter init success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hasInit <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    mHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>模板代码的读取逻辑就在LogisticsCenter中，可以看到arouter通过DexFile读取到对应包名，筛选出com.alibaba.android.arouter.routes目录下route文件的路径，缓存在sharePeferences中，最后通过反射加载class文件缓存至warehouse中。</p><pre class=" language-java"><code class="language-java">ARouter<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token string">"/test/activity2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">navigation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一般使用上面的方法进行ARouter跳转，逻辑大概是通过path在RouteMetaData中找到相关联的类信息存储在postcard对象中，最后在_ARoute中实现跳转逻辑，如果路由地址对应的是Activity，执行的就是ActivityCompat.startActivity/ActivityCompat.startActivityForResult.</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>arouter的实现逻辑差不多就分析完了，总的来说就是编译时提取注解信息，生成java模板代码，难点可能在于对apt/javapoet我们并不是非常熟练，这两部分需要自己亲自实践一下才能熟悉它们的api，因此我准备重新开一章具体实践一下。感兴趣的朋友可以继续关注一下。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Jetpack系列其二livedata</title>
      <link href="/2019/11/07/Jetpack-livedata/"/>
      <url>/2019/11/07/Jetpack-livedata/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>livedata是被观察者的持有类，并能感应生命周期。此篇文章重在分析两点</p><ul><li>livedata如何实现观察者模式的</li><li>livedata是如何感知数据流的变化的</li><li>livedata是如何感知lifecycleOwner的生命周期的</li></ul><a id="more"></a><h2 id="使用与分析"><a href="#使用与分析" class="headerlink" title="使用与分析"></a>使用与分析</h2><p>livedata一般是配合viewmodel使用的，首先看看下面的使用案例</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> StoreViewModel<span class="token operator">:</span> ViewModel <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 初始化</span>    <span class="token keyword">val</span> articles<span class="token operator">:</span> MutableLiveData<span class="token operator">&lt;</span>MutableList<span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token operator">></span> <span class="token operator">=</span> <span class="token function">MutableLiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">loadArticles</span><span class="token punctuation">(</span>page<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 网络请求应放在对应repository中，这里为了方便说明</span>        <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> articlesWrapper <span class="token operator">=</span> <span class="token function">apiCenter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">homeArticles</span><span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 从服务器获取数据</span>            articles<span class="token punctuation">.</span><span class="token function">postValue</span><span class="token punctuation">(</span>articlesWrapper<span class="token punctuation">.</span>data<span class="token punctuation">.</span>datas<span class="token punctuation">.</span><span class="token function">toMutableList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> HomeFragment <span class="token operator">:</span> <span class="token function">BaseFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">initialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        vm<span class="token punctuation">.</span>articles<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>            Observer<span class="token operator">&lt;</span>MutableList<span class="token operator">&lt;</span>Article<span class="token operator">></span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 通知UI更新</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来看看，在livedata内部是如何感知数据流变化的</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// livedata的构造方法</span><span class="token keyword">public</span> <span class="token function">LiveData</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mData <span class="token operator">=</span> value<span class="token punctuation">;</span>    mVersion <span class="token operator">=</span> START_VERSION <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token function">LiveData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mData <span class="token operator">=</span> NOT_SET<span class="token punctuation">;</span>    mVersion <span class="token operator">=</span> START_VERSION<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 其中mData就是存储的数据了，version可以看做存储数据的当前版本</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> postTask<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mDataLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        postTask <span class="token operator">=</span> mPendingData <span class="token operator">==</span> NOT_SET<span class="token punctuation">;</span>        mPendingData <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postTask<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    ArchTaskExecutor<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">postToMainThread</span><span class="token punctuation">(</span>mPostValueRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 发送数据到主线程，如果在主线程执行完任务之前postValue多次，那么只会分发最后一次的value</span><span class="token comment" spellcheck="true">// ArchTaskExecutor.getInstance().postToMainThread其实就是调用主线程的Handler将value传递到主线程</span><span class="token keyword">private</span> <span class="token keyword">final</span> Runnable mPostValueRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object newValue<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mDataLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            newValue <span class="token operator">=</span> mPendingData<span class="token punctuation">;</span>            mPendingData <span class="token operator">=</span> NOT_SET<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//noinspection unchecked</span>        <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token annotation punctuation">@MainThread</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertMainThread</span><span class="token punctuation">(</span><span class="token string">"setValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mVersion<span class="token operator">++</span><span class="token punctuation">;</span>    mData <span class="token operator">=</span> value<span class="token punctuation">;</span>    <span class="token function">dispatchingValue</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 在这里会给mData重新赋值，然后做分发</span><span class="token comment" spellcheck="true">// 在MutableLiveData中的setValue其实就是调用这个方法，在主线程中如果要直接给livedata赋值，可以直接调用此方法</span><span class="token comment" spellcheck="true">// 再来看看livedata内部的观察者</span><span class="token keyword">private</span> SafeIterableMap<span class="token operator">&lt;</span>Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span><span class="token punctuation">,</span> ObserverWrapper<span class="token operator">></span> mObservers <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">SafeIterableMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 它其实是个双向列表 有如下优点</span><span class="token comment" spellcheck="true">// 1.直接移动指针插入且无需执行hash算法效率高</span><span class="token comment" spellcheck="true">// 2.可以一边遍历一遍删除元素而不会引起ConcurrentModifiedException</span><span class="token comment" spellcheck="true">// 3.使用双向链表存储数据比HashMap(java8)更节省空间</span><span class="token comment" spellcheck="true">// 向livedata添加一个观察者</span><span class="token annotation punctuation">@MainThread</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">observe</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> LifecycleOwner owner<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">assertMainThread</span><span class="token punctuation">(</span><span class="token string">"observe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>owner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> DESTROYED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ignore</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LifecycleBoundObserver wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LifecycleBoundObserver</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果Map中不存在就放置进去并返回Null，如果存在直接拿出</span>    ObserverWrapper existing <span class="token operator">=</span> mObservers<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>observer<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>existing<span class="token punctuation">.</span><span class="token function">isAttachedTo</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot add the same observer"</span>                <span class="token operator">+</span> <span class="token string">" with different lifecycles"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    owner<span class="token punctuation">.</span><span class="token function">getLifecycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// LifecycleBoundObserver 生命周期边界的观察者</span><span class="token comment" spellcheck="true">// LifecycleBoundObserver 它既是livedata事件的观察者又是生命周期变化的观察者，换句话来说，它既能感知livedata数据流的变化也能感知lifecycleOwner生命周期的变化</span><span class="token comment" spellcheck="true">// 它被添加到了mObservers中也被添加到了LifecycleRegistry的mObserverMap: FastSafeIterableMap中</span><span class="token comment" spellcheck="true">// 再来看看livedata是如何将数据变化下发到每一个观察者的</span><span class="token comment" spellcheck="true">// 如果传值就是通知指定的observer，传Null就是通知所有的observer</span><span class="token keyword">void</span> <span class="token function">dispatchingValue</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> ObserverWrapper initiator<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mDispatchingValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDispatchInvalidated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    mDispatchingValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        mDispatchInvalidated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>initiator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">considerNotify</span><span class="token punctuation">(</span>initiator<span class="token punctuation">)</span><span class="token punctuation">;</span>            initiator <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Observer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span><span class="token punctuation">,</span> ObserverWrapper<span class="token operator">>></span> iterator <span class="token operator">=</span>                    mObservers<span class="token punctuation">.</span><span class="token function">iteratorWithAdditions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">considerNotify</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mDispatchInvalidated<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>mDispatchInvalidated<span class="token punctuation">)</span><span class="token punctuation">;</span>    mDispatchingValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 这里跳过分析SafeIterableMap，FastSafeIterableMap，先把它们当作普通的迭代器，着重看下considerNotify</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">considerNotify</span><span class="token punctuation">(</span>ObserverWrapper observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observer<span class="token punctuation">.</span>mActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Check latest state b4 dispatch. Maybe it changed state but we didn't get the event yet.</span>    <span class="token comment" spellcheck="true">// we still first check observer.active to keep it as the entrance for events. So even if</span>    <span class="token comment" spellcheck="true">// the observer moved to an active state, if we've not received that event, we better not</span>    <span class="token comment" spellcheck="true">// notify for a more predictable notification order.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>observer<span class="token punctuation">.</span><span class="token function">shouldBeActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        observer<span class="token punctuation">.</span><span class="token function">activeStateChanged</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>observer<span class="token punctuation">.</span>mLastVersion <span class="token operator">>=</span> mVersion<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    observer<span class="token punctuation">.</span>mLastVersion <span class="token operator">=</span> mVersion<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//noinspection unchecked</span>    observer<span class="token punctuation">.</span>mObserver<span class="token punctuation">.</span><span class="token function">onChanged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> mData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 前面说了，这里的ObserverWrapper的实例是LifecycleBoundObserver</span><span class="token comment" spellcheck="true">// 通知观察者之前首先会检查lifecycleOwner的生命周期然后再检测数据的版本，都符合要求才会通知数据更新</span></code></pre><p>到这里，livedata内部数据流动与感知的过程已大体分析完成了，它内部用SafeInterableMap作为观察者的容器，在数据发生变化的时候分发给所有的观察者，在lifecycleOwner生命周期发生变化时也会通过LifecycleBoundObserver的onStateChanged通知数据分发。</p><p>梳理了一下流程图：  </p><p><img src="https://dreamweaver.img.we1code.cn/LifecycleDispatcher.png" alt="lifecycleDispatch"></p><h2 id="livedata实际应用"><a href="#livedata实际应用" class="headerlink" title="livedata实际应用"></a>livedata实际应用</h2><h3 id="livedata事件总线简单实现"><a href="#livedata事件总线简单实现" class="headerlink" title="livedata事件总线简单实现"></a>livedata事件总线简单实现</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">import</span> androidx<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>MainThread<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>LifecycleOwner<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>MutableLiveData<span class="token keyword">import</span> androidx<span class="token punctuation">.</span>lifecycle<span class="token punctuation">.</span>Observer<span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Exception<span class="token keyword">class</span> LiveDataBus <span class="token keyword">private</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> mLock <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> instance<span class="token operator">:</span> LiveDataBus <span class="token operator">=</span> <span class="token function">LiveDataBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> bus<span class="token operator">:</span> HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BusLiveData<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token operator">></span> <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> BusLiveData<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">subscribe</span><span class="token punctuation">(</span>owner<span class="token operator">:</span> LifecycleOwner<span class="token punctuation">,</span> observer<span class="token operator">:</span> Observer<span class="token operator">&lt;</span>Any<span class="token operator">></span><span class="token punctuation">,</span> event<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bus<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> wrapper <span class="token operator">=</span> <span class="token function">BusLiveDataWrapper</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>            <span class="token keyword">val</span> liveData <span class="token operator">=</span> bus<span class="token punctuation">[</span>event<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>liveData<span class="token operator">?</span><span class="token punctuation">.</span>alreadySubmit <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span>scrapPreEvent <span class="token operator">=</span> <span class="token boolean">true</span>                liveData<span class="token punctuation">.</span>alreadySubmit <span class="token operator">=</span> <span class="token boolean">true</span>            <span class="token punctuation">}</span>            bus<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>owner<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">postEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> String<span class="token punctuation">,</span> addition<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bus<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bus<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">postValue</span><span class="token punctuation">(</span>addition<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">synchronized</span><span class="token punctuation">(</span>mLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                bus<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BusLiveData</span><span class="token punctuation">(</span>addition<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation builtin">@MainThread</span>    <span class="token keyword">fun</span> <span class="token function">setEvent</span><span class="token punctuation">(</span>event<span class="token operator">:</span> String<span class="token punctuation">,</span> addition<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bus<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bus<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>value <span class="token operator">=</span> addition        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            bus<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">BusLiveData</span><span class="token punctuation">(</span>addition<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">inner</span> <span class="token keyword">class</span> BusLiveData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">:</span> MutableLiveData<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> alreadySubmit<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>    <span class="token keyword">inner</span> <span class="token keyword">class</span> BusLiveDataWrapper<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> observer<span class="token operator">:</span> Observer<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span>        <span class="token keyword">var</span> scrapPreEvent<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token punctuation">)</span> <span class="token operator">:</span>        Observer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onChanged</span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>scrapPreEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>                scrapPreEvent <span class="token operator">=</span> <span class="token boolean">true</span>                <span class="token keyword">return</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                observer<span class="token punctuation">.</span><span class="token function">onChanged</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// catch ClassCastException etc.</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最后，做下总结，livedata的大致流程已经分析完了，但是比较重要的类LifecycleRegistry只是一笔带过了没有做分析，它是如何将生命周期变化事件分发到订阅者的呢？另外还有两个比较重要的数据结构FastSafeIterableMap和SafeIterableMap，在这里先记录一下啦，以后再填上吧。🖖</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.android.com/topic/libraries/architecture/livedata">LiveData Overview</a> by Android Developers</li><li><a href="https://juejin.im/post/5b5ac0825188251acd0f3777">用LiveDataBus替代RxBus、EventBus——Android消息总线的演进之路</a> by 美团技术团队 海亮</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jetpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Koltin委托属性</title>
      <link href="/2019/10/24/KotlinDelegate/"/>
      <url>/2019/10/24/KotlinDelegate/</url>
      
        <content type="html"><![CDATA[<h2 id="委托模式"><a href="#委托模式" class="headerlink" title="委托模式"></a>委托模式</h2><p>在Kotlin中委托模式通过by关键字实现</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Base <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Derived</span><span class="token punctuation">(</span>b<span class="token operator">:</span> Base<span class="token punctuation">)</span><span class="token operator">:</span> Base <span class="token keyword">by</span> b</code></pre><p>上述表达式表示b将代理Derived去实现interface Base的方法。</p><a id="more"></a><h2 id="委托属性"><a href="#委托属性" class="headerlink" title="委托属性"></a>委托属性</h2><h3 id="延迟属性-Lazy"><a href="#延迟属性-Lazy" class="headerlink" title="延迟属性(Lazy)"></a>延迟属性(Lazy)</h3><p>Kotlin标准库中有很多有用的委托属性(delegates，代理属性)，像使用lazy方法创建一个对象，只有在第一次使用的时候会被初始化。</p><p>lazy的重载方法</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> actual <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">lazy</span><span class="token punctuation">(</span>initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">SynchronizedLazyImpl</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span><span class="token keyword">public</span> actual <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">lazy</span><span class="token punctuation">(</span>lock<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span> initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span> <span class="token function">SynchronizedLazyImpl</span><span class="token punctuation">(</span>initializer<span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token keyword">public</span> actual <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">lazy</span><span class="token punctuation">(</span>mode<span class="token operator">:</span> LazyThreadSafetyMode<span class="token punctuation">,</span> initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token operator">=</span>    <span class="token keyword">when</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LazyThreadSafetyMode<span class="token punctuation">.</span>SYNCHRONIZED <span class="token operator">-></span> <span class="token function">SynchronizedLazyImpl</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span>        LazyThreadSafetyMode<span class="token punctuation">.</span>PUBLICATION <span class="token operator">-></span> <span class="token function">SafePublicationLazyImpl</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span>        LazyThreadSafetyMode<span class="token punctuation">.</span>NONE <span class="token operator">-></span> <span class="token function">UnsafeLazyImpl</span><span class="token punctuation">(</span>initializer<span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>由上可见，Lazy接口的实现类有三种SynchronizedLazyImpl，SafePublicationLazyImpl，UnsafeLazyImpl，前两者线程安全，但是实现方法有所不同，分别使用线程锁和原子类实现</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">class</span> SynchronizedLazyImpl<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span><span class="token punctuation">(</span>initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">,</span> lock<span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> initializer    <span class="token annotation builtin">@Volatile</span> <span class="token keyword">private</span> <span class="token keyword">var</span> _value<span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token operator">=</span> UNINITIALIZED_VALUE    <span class="token comment" spellcheck="true">// final field is required to enable safe publication of constructed instance</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> lock <span class="token operator">=</span> lock <span class="token operator">?:</span> <span class="token keyword">this</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> value<span class="token operator">:</span> T        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> _v1 <span class="token operator">=</span> _value            <span class="token keyword">if</span> <span class="token punctuation">(</span>_v1 <span class="token operator">!==</span> UNINITIALIZED_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> _v1 <span class="token keyword">as</span> T            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token function">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">val</span> _v2 <span class="token operator">=</span> _value                <span class="token keyword">if</span> <span class="token punctuation">(</span>_v2 <span class="token operator">!==</span> UNINITIALIZED_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>_v2 <span class="token keyword">as</span> T<span class="token punctuation">)</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">val</span> typedValue <span class="token operator">=</span> initializer<span class="token operator">!!</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    _value <span class="token operator">=</span> typedValue                    initializer <span class="token operator">=</span> <span class="token keyword">null</span>                    typedValue                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> _value <span class="token operator">!==</span> UNINITIALIZED_VALUE    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"Lazy value not initialized yet."</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">writeReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any <span class="token operator">=</span> <span class="token function">InitializedLazyImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">class</span> SafePublicationLazyImpl<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span><span class="token punctuation">(</span>initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span> <span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token annotation builtin">@Volatile</span> <span class="token keyword">private</span> <span class="token keyword">var</span> initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> initializer    <span class="token annotation builtin">@Volatile</span> <span class="token keyword">private</span> <span class="token keyword">var</span> _value<span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token operator">=</span> UNINITIALIZED_VALUE    <span class="token comment" spellcheck="true">// this final field is required to enable safe publication of constructed instance</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> <span class="token keyword">final</span><span class="token operator">:</span> Any <span class="token operator">=</span> UNINITIALIZED_VALUE    <span class="token keyword">override</span> <span class="token keyword">val</span> value<span class="token operator">:</span> T        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">val</span> value <span class="token operator">=</span> _value            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!==</span> UNINITIALIZED_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> value <span class="token keyword">as</span> T            <span class="token punctuation">}</span>            <span class="token keyword">val</span> initializerValue <span class="token operator">=</span> initializer            <span class="token comment" spellcheck="true">// if we see null in initializer here, it means that the value is already set by another thread</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>initializerValue <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">val</span> newValue <span class="token operator">=</span> <span class="token function">initializerValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>valueUpdater<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> UNINITIALIZED_VALUE<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    initializer <span class="token operator">=</span> <span class="token keyword">null</span>                    <span class="token keyword">return</span> newValue                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> _value <span class="token keyword">as</span> T        <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> _value <span class="token operator">!==</span> UNINITIALIZED_VALUE    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"Lazy value not initialized yet."</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">writeReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any <span class="token operator">=</span> <span class="token function">InitializedLazyImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">val</span> valueUpdater <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span>AtomicReferenceFieldUpdater<span class="token punctuation">.</span><span class="token function">newUpdater</span><span class="token punctuation">(</span>            SafePublicationLazyImpl<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span>            Any<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span>            <span class="token string">"_value"</span>        <span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">internal</span> <span class="token keyword">class</span> UnsafeLazyImpl<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">></span><span class="token punctuation">(</span>initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span> <span class="token operator">:</span> Lazy<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">var</span> initializer<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">=</span> initializer    <span class="token keyword">private</span> <span class="token keyword">var</span> _value<span class="token operator">:</span> Any<span class="token operator">?</span> <span class="token operator">=</span> UNINITIALIZED_VALUE    <span class="token keyword">override</span> <span class="token keyword">val</span> value<span class="token operator">:</span> T        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>_value <span class="token operator">===</span> UNINITIALIZED_VALUE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                _value <span class="token operator">=</span> initializer<span class="token operator">!!</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                initializer <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span>            <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> _value <span class="token keyword">as</span> T        <span class="token punctuation">}</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> _value <span class="token operator">!==</span> UNINITIALIZED_VALUE    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInitialized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"Lazy value not initialized yet."</span>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">writeReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Any <span class="token operator">=</span> <span class="token function">InitializedLazyImpl</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>至于3者的区别，官方文档上已有说明，如果该值只在一个线程中计算，并且所有线程会看到相同的值就使用SynchronizedLazyImpl；如果该值在多个线程可以同时执行，那么使用SafePublicationLazyImpl；如果初始化发生与使用在同一个线程就使用UnsafeLazyImpl，它不会有任何线程安全的保证和开销。</p><h3 id="可观察属性-Observable"><a href="#可观察属性-Observable" class="headerlink" title="可观察属性(Observable)"></a>可观察属性(Observable)</h3><p>在kotlin.properties.Delegates中，可以找到相关方法，分别是observable和vetoable，它们在被观察者的值发生改变时会执行回调，回调有三个值分别时被观察者的类型，旧值与新值；两者的区别在于，vetoable是否给被观察者赋值取决与回调函数的返回值。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> Delegates<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> property<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue <span class="token operator">-></span><span class="token punctuation">}</span><span class="token keyword">var</span> age<span class="token operator">:</span> String <span class="token keyword">by</span> Delegates<span class="token punctuation">.</span><span class="token function">vetoable</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> property<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue <span class="token operator">-></span>    <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h3 id="map代理-map-delegate"><a href="#map代理-map-delegate" class="headerlink" title="map代理(map delegate)"></a>map代理(map delegate)</h3><p>暂时没有使用过这种代理。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token keyword">val</span> map<span class="token operator">:</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> name<span class="token operator">:</span> String <span class="token keyword">by</span> map    <span class="token keyword">val</span> age<span class="token operator">:</span> Int <span class="token keyword">by</span> map<span class="token punctuation">}</span></code></pre><p>按照官方文档的例子，来看传入键值对，map代理会根据键值给相对的属性赋值，相关的实现方法如下</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@kotlin</span><span class="token punctuation">.</span>internal<span class="token punctuation">.</span>InlineOnly<span class="token keyword">public</span> inline operator fun <span class="token operator">&lt;</span>V<span class="token punctuation">,</span> V1 <span class="token operator">:</span> V<span class="token operator">></span> Map<span class="token operator">&lt;</span>in String<span class="token punctuation">,</span> <span class="token annotation punctuation">@Exact</span> V<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> V1 <span class="token operator">=</span>    <span class="token annotation punctuation">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token function">getOrImplicitDefault</span><span class="token punctuation">(</span>property<span class="token punctuation">.</span>name<span class="token punctuation">)</span> as V1<span class="token punctuation">)</span><span class="token annotation punctuation">@kotlin</span><span class="token punctuation">.</span>jvm<span class="token punctuation">.</span><span class="token function">JvmName</span><span class="token punctuation">(</span><span class="token string">"getOrImplicitDefaultNullable"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PublishedApi</span>internal fun <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">getOrImplicitDefault</span><span class="token punctuation">(</span>key<span class="token operator">:</span> K<span class="token punctuation">)</span><span class="token operator">:</span> V <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> is MapWithDefault<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOrImplicitDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">getOrElseNullable</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">throw</span> <span class="token function">NoSuchElementException</span><span class="token punctuation">(</span><span class="token string">"Key $key is missing in the map."</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>如果传入的map没有实现MapWithDefault接口，key不存在时会抛出NoSuchElementException异常，因此初始化map时，需要做类似如下操作：</p><pre class=" language-kotlin"><code class="language-kotlin">emptyMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDefault</span> <span class="token punctuation">{</span> key <span class="token operator">-></span> <span class="token string">""</span> <span class="token punctuation">}</span></code></pre><p>这样找不到相对应的key-value时，就会使用默认值了，实现方法如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">internal</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span> Map<span class="token operator">&lt;</span>K<span class="token punctuation">,</span> V<span class="token operator">></span><span class="token punctuation">.</span><span class="token function">getOrElseNullable</span><span class="token punctuation">(</span>key<span class="token operator">:</span> K<span class="token punctuation">,</span> defaultValue<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> V<span class="token punctuation">)</span><span class="token operator">:</span> V <span class="token punctuation">{</span>    <span class="token keyword">val</span> value <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string">"UNCHECKED_CAST"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> value <span class="token keyword">as</span> V    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用的场景没有遇到过，但是有相关博客说，如果需要预定义keys的时候可以使用，相关博文会贴在下面</p><h2 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h2><h3 id="Shared-Preferences"><a href="#Shared-Preferences" class="headerlink" title="Shared Preferences"></a>Shared Preferences</h3><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> SharedPreferences<span class="token punctuation">.</span><span class="token function">delegate</span><span class="token punctuation">(</span>    defaultValue<span class="token operator">:</span> T<span class="token punctuation">,</span>    key<span class="token operator">:</span> String<span class="token operator">?</span><span class="token punctuation">,</span>    <span class="token keyword">crossinline</span> getter<span class="token operator">:</span> SharedPreferences<span class="token punctuation">.</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> T<span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">,</span>    <span class="token keyword">crossinline</span> setter<span class="token operator">:</span> Editor<span class="token punctuation">.</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> T<span class="token punctuation">)</span> <span class="token operator">-></span> Editor<span class="token punctuation">)</span><span class="token operator">:</span> ReadWriteProperty<span class="token operator">&lt;</span>Any<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">object</span><span class="token operator">:</span> ReadWriteProperty<span class="token operator">&lt;</span>Any<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span>            <span class="token function">getter</span><span class="token punctuation">(</span>key<span class="token operator">?:</span>property<span class="token punctuation">.</span>name<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token punctuation">,</span> property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">,</span> value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span>            <span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setter</span><span class="token punctuation">(</span>key<span class="token operator">?:</span>property<span class="token punctuation">.</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>有了如上方法我们就可以改造SharedPreferences了：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token comment" spellcheck="true">// 存储Int</span><span class="token keyword">fun</span> SharedPreferences<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span>def<span class="token operator">:</span> Int<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> key<span class="token operator">:</span> String<span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token function">delegate</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> key<span class="token punctuation">,</span> SharedPreferences<span class="token operator">::</span>getInt<span class="token punctuation">,</span> Editor<span class="token operator">::</span>putInt<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 存储Long</span><span class="token keyword">fun</span> SharedPreferences<span class="token punctuation">.</span><span class="token function">long</span><span class="token punctuation">(</span>def<span class="token operator">:</span> Long<span class="token operator">=</span><span class="token number">0L</span><span class="token punctuation">,</span> key<span class="token operator">:</span> String<span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=</span>    <span class="token function">delegate</span><span class="token punctuation">(</span>def<span class="token punctuation">,</span> key<span class="token punctuation">,</span> SharedPreferences<span class="token operator">::</span>getLong<span class="token punctuation">)</span><span class="token punctuation">,</span> Editor<span class="token operator">::</span>putLong<span class="token punctuation">)</span></code></pre><p>使用</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">var</span> sthInt <span class="token keyword">by</span> prefs<span class="token punctuation">.</span><span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">init</span> <span class="token punctuation">{</span>    sthInt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// sthInt的getter和setter都被代理了，取值时实际上调用的是SharedPreferences::getInt，被赋值的同时，也通过Editor::putInt将值存入了SharedPreferences中。</span></code></pre><p>更多的使用案例会逐一的添加的此篇中。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="&quot;https://medium.com/hackernoon/kotlin-delegates-in-android-development-part-1-50346cf4aed7&quot;">Kotlin delegates in Android development - Part1</a> by Fabio Collini</p><p><a href="&quot;https://www.kotlincn.net/docs/reference/delegated-properties.html&quot;">Kotlin 委托属性</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fragment原理浅析</title>
      <link href="/2019/09/29/Fragment%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/"/>
      <url>/2019/09/29/Fragment%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Fragment在日常开发中非常的常用，一版都是配合ViewPager或FrameLayout使用，我们基本不用担心操作它attachToActivity，因为FragmentManager都帮我们处理好了。那么Fragment是如何绑定Activity的生命周期的呢？系统是如何将Fragment添加到视图层的呢？Fragment的回退栈又是什么呢？带着这些问题我们开始探索Fragment的源码吧。</p><a id="more"></a><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>首先来回顾一下，我们如何添加Fragment的:</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> fm <span class="token operator">=</span> supportFragmentManager<span class="token keyword">val</span> ts <span class="token operator">=</span> fm<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>ts<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>首先弄清几个概念：</p><ul><li>FragmentController 主要作用是绑定Activity与Fragment的生命周期，在FragmentActivity可以看到在每个生命周期函数，FragmentController都有做分发，最终交给了FragmentManager处理</li><li>FragmentManager Fragments的直接操作者，管理Fragment的内部状态以及添加\移除\隐藏\显示Fragment等操作</li><li>FragmentTransaction 对Fragment操作的集合，各项操作会存储在Ops中，最终在FragmentManager中被执行</li></ul><blockquote><p>tips: FragmentTransaction本身是一个抽象类，它包含着一个内部类Op，根据其构造函数可以看出来这个类用于记录Fragment的操作，并将这一系列操作存储在mOps，其中四个抽象方法commit/commitAllowingStateLoss/commitNow/commitNowAllowingStateLoss就是我们经常放在最后执行的方法了。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// fm.beginTransaction()</span><span class="token annotation punctuation">@NonNull</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> FragmentTransaction <span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BackStackRecord</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>BackStackRecord继承了FragmentTransaction，可以看到在这个类中最终还是调用了FragmentManager的enqueueAction方法，将所有的操作加入执行队列中。并对需要记录Fragment回退栈的操作做如下处理：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">allocBackStackIndex</span><span class="token punctuation">(</span>BackStackRecord bse<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mAvailBackStackIndices <span class="token operator">==</span> null <span class="token operator">||</span> mAvailBackStackIndices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mBackStackIndices <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                mBackStackIndices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>BackStackRecord<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> mBackStackIndices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Setting back stack index "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" to "</span> <span class="token operator">+</span> bse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 将当前操作添加到数组中</span>            mBackStackIndices<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 找到一个可用的位置进行存储当前操作</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> mAvailBackStackIndices<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>mAvailBackStackIndices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG<span class="token punctuation">)</span> Log<span class="token punctuation">.</span><span class="token function">v</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Adding back stack index "</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">" with "</span> <span class="token operator">+</span> bse<span class="token punctuation">)</span><span class="token punctuation">;</span>            mBackStackIndices<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> bse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> index<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终调用了FragmentManager的enqueueAction/execSingleAction：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">execPendingActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 校验准备工作</span>    <span class="token function">ensureExecReady</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> didSomething <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化数据源</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">generateOpsForPendingActions</span><span class="token punctuation">(</span>mTmpRecords<span class="token punctuation">,</span> mTmpIsPop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mExecutingActions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">removeRedundantOperationsAndExecute</span><span class="token punctuation">(</span>mTmpRecords<span class="token punctuation">,</span> mTmpIsPop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 清除执行程序</span>            <span class="token function">cleanupExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        didSomething <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">updateOnBackPressedCallbackEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 等待加载延迟的Fragment</span>    <span class="token function">doPendingDeferredStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">burpActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> didSomething<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execSingleAction</span><span class="token punctuation">(</span>OpGenerator action<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowStateLoss<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allowStateLoss <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mHost <span class="token operator">==</span> null <span class="token operator">||</span> mDestroyed<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// This FragmentManager isn't attached, so drop the entire transaction.</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ensureExecReady</span><span class="token punctuation">(</span>allowStateLoss<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span><span class="token function">generateOps</span><span class="token punctuation">(</span>mTmpRecords<span class="token punctuation">,</span> mTmpIsPop<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mExecutingActions <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">removeRedundantOperationsAndExecute</span><span class="token punctuation">(</span>mTmpRecords<span class="token punctuation">,</span> mTmpIsPop<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">cleanupExec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">updateOnBackPressedCallbackEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">doPendingDeferredStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">burpActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>无论是执行execPendingActions还是execSingleAction，其核心方法还是removeRedundantOperationsAndExecute，这个方法可以移除冗余的操作，举个例子，如果两个事务一起执行，一个用于添加FragmentA，一个用于将FragmentA替换成FragmentB，实际上只有FragmentB会被添加，无法感应到FragmentA的创建/销毁生命周期。这个就是移除冗余操作的副作用了，Fragment的状态不会如预想那样变化。<br><em>疑问，这个方法是如何去除冗余操作的呢？</em></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 移除冗余的回退栈操作再执行，需要设置setReorderingAllowed(true)</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">removeRedundantOperationsAndExecute</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>BackStackRecord<span class="token operator">></span> records<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> isRecordPop<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 省略...</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> numRecords <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> startIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> recordNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> recordNum <span class="token operator">&lt;</span> numRecords<span class="token punctuation">;</span> recordNum<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> canReorder <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>recordNum<span class="token punctuation">)</span><span class="token punctuation">.</span>mReorderingAllowed<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 所有事务如果设置了setReorderingAllowed(true)则全部跳过在最后一起执行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>canReorder<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// execute all previous transactions</span>                <span class="token comment" spellcheck="true">// 如果中间有事务A没有设置setReorderingAllowed(true)，则从startIndex到事务A会被一起执行</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">!=</span> recordNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">executeOpsTogether</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> isRecordPop<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> recordNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// execute all pop operations that don't allow reordering together or one add operation</span>                <span class="token comment" spellcheck="true">// 上述注释说明此处执行所有不允许一起排序的pop操作</span>                <span class="token comment" spellcheck="true">// 在BackStackRecord中isRecordPop都为false，在PopBackStackState中isRecordPop都为true，这两个类分别对应着入栈和出栈，且仅当BackStackRecord设置了addToBackStack后才会被记录</span>                <span class="token keyword">int</span> reorderingEnd <span class="token operator">=</span> recordNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isRecordPop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>recordNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>reorderingEnd <span class="token operator">&lt;</span> numRecords                            <span class="token operator">&amp;&amp;</span> isRecordPop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>reorderingEnd<span class="token punctuation">)</span>                            <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>records<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>reorderingEnd<span class="token punctuation">)</span><span class="token punctuation">.</span>mReorderingAllowed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        reorderingEnd<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token function">executeOpsTogether</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> isRecordPop<span class="token punctuation">,</span> recordNum<span class="token punctuation">,</span> reorderingEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>                startIndex <span class="token operator">=</span> reorderingEnd<span class="token punctuation">;</span>                recordNum <span class="token operator">=</span> reorderingEnd <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>startIndex <span class="token operator">!=</span> numRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">executeOpsTogether</span><span class="token punctuation">(</span>records<span class="token punctuation">,</span> isRecordPop<span class="token punctuation">,</span> startIndex<span class="token punctuation">,</span> numRecords<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>接着往下看executeOps</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">executeOps</span><span class="token punctuation">(</span>ArrayList<span class="token operator">&lt;</span>BackStackRecord<span class="token operator">></span> records<span class="token punctuation">,</span> ArrayList<span class="token operator">&lt;</span>Boolean<span class="token operator">></span> isRecordPop<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> BackStackRecord record <span class="token operator">=</span> records<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> isPop <span class="token operator">=</span> isRecordPop<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPop<span class="token punctuation">)</span> <span class="token punctuation">{</span>             record<span class="token punctuation">.</span><span class="token function">bumpBackStackNesting</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> moveToState <span class="token operator">=</span> i <span class="token operator">==</span> <span class="token punctuation">(</span>endIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行PopBackStackState</span>            record<span class="token punctuation">.</span><span class="token function">executePopOps</span><span class="token punctuation">(</span>moveToState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            record<span class="token punctuation">.</span><span class="token function">bumpBackStackNesting</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 执行BackStackRecord</span>            record<span class="token punctuation">.</span><span class="token function">executeOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后是BackStackRecord的executeOps，最终这些ops由FragmentManager处理，将Fragment添加至mAdded或者从mAdded中移除，并对Fragment的内部状态进行修改。</p><p>最后也是最重要的方法moveToState，它主要负责修改Fragment的生命周期状态，在这我们可以看到Fragment是如何被添加至容器中的，在此Fragment中内部状态通过FragmentManger更新。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> Fragment<span class="token punctuation">.</span>CREATED<span class="token operator">:</span>    <span class="token comment" spellcheck="true">//省略...</span>    f<span class="token punctuation">.</span>mContainer <span class="token operator">=</span> container<span class="token punctuation">;</span>    f<span class="token punctuation">.</span><span class="token function">performCreateView</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">performGetLayoutInflater</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mSavedFragmentState<span class="token punctuation">)</span><span class="token punctuation">,</span> container<span class="token punctuation">,</span> f<span class="token punctuation">.</span>mSavedFragmentState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>mView <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">.</span>mInnerView <span class="token operator">=</span> f<span class="token punctuation">.</span>mView<span class="token punctuation">;</span>        f<span class="token punctuation">.</span>mView<span class="token punctuation">.</span><span class="token function">setSaveFromParentEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将fragment的视图添加到宿主的容器中</span>            container<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>mView<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>mHidden<span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span>mView<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>View<span class="token punctuation">.</span>GONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 省略...</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        f<span class="token punctuation">.</span>mInnerView <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 省略...</span></code></pre><p>至此，文章开始的疑问差不多都解决了，最后再梳理一下Fragment初始化流程。流程图大体如下：</p><p><img src="https://dreamweaver.img.we1code.cn/fragment%E5%88%9D%E5%A7%8B%E5%8C%96%E8%BF%87%E7%A8%8B.png" alt=" "></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Fragment的逻辑复杂，如果仅仅是靠读源码，是无法理清其复杂的逻辑关系的。此文的目的只是对Fragment做一次简单的探索，弄清楚它是如何被添加到视图的，如何去感知Activity的生命周期的，至于它的高级用法以及使用注意事项将会发布在其后的文章。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android多渠道打包及加固方案</title>
      <link href="/2019/09/25/Android%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E5%8F%8A%E5%8A%A0%E5%9B%BA%E6%96%B9%E6%A1%88/"/>
      <url>/2019/09/25/Android%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85%E5%8F%8A%E5%8A%A0%E5%9B%BA%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android多渠道打包已经是老生常谈的问题了，各个大厂也先后开源了自己的打包方案，为我们开发者带来不少便捷。今天我就来谈谈美团的Walle，我在项目中也正是用到了它，也算做个总结和备忘吧。本篇中会提及Walle的基本使用方法以及如何在项目中配置加固使用，当然，最后也稍微会从源码的角度去分析一下这个方案的原理。那么，现在开始吧。</p><a id="more"></a><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>参考Walle项目<a href="https://github.com/Meituan-Dianping/walle">Github</a>首页，操作如下：<br>在工程目录引入</p><pre class=" language-groovy"><code class="language-groovy">buildscript <span class="token punctuation">{</span>    dependencies <span class="token punctuation">{</span>        classpath <span class="token string">'com.meituan.android.walle:plugin:1.1.6'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在app目录下引入</p><pre class=" language-groovy"><code class="language-groovy">apply plugin<span class="token punctuation">:</span> <span class="token string">'walle'</span>dependencies <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 用于读取渠道号</span>    compile <span class="token string">'com.meituan.android.walle:library:1.1.6'</span><span class="token punctuation">}</span></code></pre><p>配置信息呢，可以参考官方说明，我这就简单记录下(copy)了</p><pre class=" language-groovy"><code class="language-groovy">walle <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 指定渠道包的输出路径</span>    apkOutputFolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"${project.buildDir}/outputs/channels"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定制渠道包的APK的文件名称</span>    apkFileNameFormat <span class="token operator">=</span> <span class="token string">'${appName}-${packageName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 渠道配置文件 一个渠道占一行</span>    channelFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"${project.getProjectDir()}/channel"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>不要忘记获取渠道信息</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> channel <span class="token operator">=</span> WalleChannelReader<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>UMConfigure<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> UMENG_APP_KEY<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> UMConfigure<span class="token punctuation">.</span>DEVICE_TYPE_PHONE<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span></code></pre><p>接下来只需要在gradle任务执行channelRelease或是执行</p><pre class=" language-bash"><code class="language-bash">gradlew clean assembleReleaseChannels</code></pre><p>渠道包就能生成在你指定的目录下面了。</p><p>但是这样操作完之后就没问题了吗？显然不是。通常我们发布自己的应用之前，还需要进行应用加固(360或是乐固，本文用的是乐固)，加固后会清除apk的签名和渠道信息，需要重新签名然后写入渠道信息。因此，打渠道变成了如下流程：<br><img src="https://dreamweaver.img.we1code.cn/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85+%E5%8A%A0%E5%9B%BA%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=" "></p><p>要满足上面的操作，项目中walle的配置显然就不太合适了，幸亏walle团队也有提供命令行工具walle-cli供我们自行打包，为了方便，我自己写了个简单的脚本，自动上传到乐固加固然后进行签名写入渠道信息，具体可以参考一下<a href="https://github.com/bokidoki/autoReinforce">autoReinforce</a>的项目说明。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>有几个问题想问下大家。</p><ol><li>渠道信息写在哪里了呢？为什么写在这个位置呢？</li><li>渠道信息是如何进行读写操作的呢？</li></ol><p>第一个问题很简单啦，文档上也说了写在了Apk中的APK Signature Block区块，如下图，之所以写在这个位置是因为v2不会对该区域进行校验。</p><p><img src="https://dreamweaver.img.we1code.cn/apk%E7%AD%BE%E5%90%8D%E7%A4%BA%E4%BE%8B%E5%9B%BE.png" alt=" ">  </p><p>在payload_reader可以找到写入渠道的逻辑，在讲述逻辑之前，我们首先要了解一下EOCD(End of Centtal Directory)的结构：</p><table><thead><tr><th>offset</th><th>Bytes</th><th>Description</th></tr></thead><tbody><tr><td>0</td><td>4</td><td>End of central directory signature = 0x06054b50</td></tr><tr><td>4</td><td>2</td><td>Number of this disk</td></tr><tr><td>6</td><td>2</td><td>Disk where central directory starts</td></tr><tr><td>8</td><td>2</td><td>Number of central directory records on this disk</td></tr><tr><td>10</td><td>2</td><td>Total number of central directory records</td></tr><tr><td>12</td><td>4</td><td>Size of central directory (bytes)</td></tr><tr><td>16</td><td>4</td><td>Offset of start of central directory, relative to start of archive</td></tr><tr><td>20</td><td>2</td><td>Comment length (n)</td></tr><tr><td>22</td><td>n</td><td>Comment</td></tr></tbody></table><p>由于渠道信息是写在APK Signature Block，因此只要找到Center Directory的位置，那么往前就能找到Apk Signing Block的位置。在Walle中，通过循环找到魔数0x06054b50(假设Comment为空，通过增加Comment的长度，确定EOCD block的位置)，从而确定comment的长度，再将长度与Comment length对比，只要能确认Comment的长度，就能确认APK Signature Block的位置了。APK Signature Block结构如下表所示：</p><table><thead><tr><th>offset</th><th>Bytes</th><th>Description</th></tr></thead><tbody><tr><td>@+0</td><td>8</td><td>block的长度(当前长度不计算在内)</td></tr><tr><td>@+8</td><td>n</td><td>ID-value值</td></tr><tr><td>@-24</td><td>8</td><td>block的长度</td></tr><tr><td>@-16</td><td>16</td><td>魔数”APK Sig Block 42”</td></tr></tbody></table><p>walle渠道信息就是写在ID-value中，在上一步中已经拿到Center Directory的offset，再向前24bytes，取8bytes，就能拿到APK Signature Block的长度了，注意这个长度是不包括前面8个bytes的，在walle中向前多偏移了8个bytes，取首尾block长度对比进行校验，代码片段如下：</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// Find the APK Signing Block. The block immediately precedes the Central Directory.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>centralDirOffset <span class="token operator">&lt;</span> APK_SIG_BLOCK_MIN_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                    <span class="token string">"APK too small for APK Signing Block. ZIP Central Directory offset: "</span>                            <span class="token operator">+</span> centralDirOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 后面16bytes就是魔数啦 加上前面8bytes的black长度信息，24bytes</span>        <span class="token comment" spellcheck="true">// * 16 bytes: magic</span>        fileChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>centralDirOffset <span class="token operator">-</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ByteBuffer footer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fileChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>footer<span class="token punctuation">)</span><span class="token punctuation">;</span>        footer<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>ByteOrder<span class="token punctuation">.</span>LITTLE_ENDIAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里不是很清楚为什么要将魔数拆开来对比？</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>footer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">!=</span> APK_SIG_BLOCK_MAGIC_LO<span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>footer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">!=</span> APK_SIG_BLOCK_MAGIC_HI<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                    <span class="token string">"No APK Signing Block before ZIP Central Directory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 尾部记录的block长度</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> apkSigBlockSizeInFooter <span class="token operator">=</span> footer<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>apkSigBlockSizeInFooter <span class="token operator">&lt;</span> footer<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token operator">||</span> <span class="token punctuation">(</span>apkSigBlockSizeInFooter <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                    <span class="token string">"APK Signing Block size out of range: "</span> <span class="token operator">+</span> apkSigBlockSizeInFooter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 将总长度与头部记录的8bytes长度相加</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> totalSize <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>apkSigBlockSizeInFooter <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> apkSigBlockOffset <span class="token operator">=</span> centralDirOffset <span class="token operator">-</span> totalSize<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>apkSigBlockOffset <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                    <span class="token string">"APK Signing Block offset out of range: "</span> <span class="token operator">+</span> apkSigBlockOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fileChannel<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>apkSigBlockOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> ByteBuffer apkSigBlock <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>totalSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        fileChannel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>apkSigBlock<span class="token punctuation">)</span><span class="token punctuation">;</span>        apkSigBlock<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span>ByteOrder<span class="token punctuation">.</span>LITTLE_ENDIAN<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 头部和尾部的长度杜比校验</span>        <span class="token keyword">final</span> <span class="token keyword">long</span> apkSigBlockSizeInHeader <span class="token operator">=</span> apkSigBlock<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>apkSigBlockSizeInHeader <span class="token operator">!=</span> apkSigBlockSizeInFooter<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                    <span class="token string">"APK Signing Block sizes in header and footer do not match: "</span>                            <span class="token operator">+</span> apkSigBlockSizeInHeader <span class="token operator">+</span> <span class="token string">" vs "</span> <span class="token operator">+</span> apkSigBlockSizeInFooter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 拿到APK Signing Block了</span></code></pre><p>再来看看ID-value区域结构</p><table><thead><tr><th>Bytes</th><th>Description</th></tr></thead><tbody><tr><td>8</td><td>序列长度n(不包括其本身)</td></tr><tr><td>4</td><td>序列id</td></tr><tr><td>n-4</td><td>内容</td></tr></tbody></table><p>了解了ID-value区域结构那么再贴一下获取custom ID-value的代码</p><pre class=" language-java"><code class="language-java">        <span class="token comment" spellcheck="true">// APK Sig Block 中的ID-value区域</span>        <span class="token keyword">final</span> ByteBuffer pairs <span class="token operator">=</span> <span class="token function">sliceFromTo</span><span class="token punctuation">(</span>apkSigningBlock<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> apkSigningBlock<span class="token punctuation">.</span><span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> ByteBuffer<span class="token operator">></span> idValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> ByteBuffer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// keep order</span>        <span class="token keyword">int</span> entryCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pairs<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            entryCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pairs<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                        <span class="token string">"Insufficient data to read size of APK Signing Block entry #"</span> <span class="token operator">+</span> entryCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取总长度 8bytes</span>            <span class="token keyword">final</span> <span class="token keyword">long</span> lenLong <span class="token operator">=</span> pairs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lenLong <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>lenLong <span class="token operator">></span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                        <span class="token string">"APK Signing Block entry #"</span> <span class="token operator">+</span> entryCount                                <span class="token operator">+</span> <span class="token string">" size out of range: "</span> <span class="token operator">+</span> lenLong<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> lenLong<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// id开始的位置</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> nextEntryPos <span class="token operator">=</span> pairs<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> pairs<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SignatureNotFoundException</span><span class="token punctuation">(</span>                        <span class="token string">"APK Signing Block entry #"</span> <span class="token operator">+</span> entryCount <span class="token operator">+</span> <span class="token string">" size out of range: "</span> <span class="token operator">+</span> len                                <span class="token operator">+</span> <span class="token string">", available: "</span> <span class="token operator">+</span> pairs<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 获取id 4bytes</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> pairs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            idValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token function">getByteBuffer</span><span class="token punctuation">(</span>pairs<span class="token punctuation">,</span> len <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pairs<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>nextEntryPos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>至此就分析完了如何在APK中去读取插入的渠道信息，顺带了解了一下APK包的结构。最后过一下如何写入渠道信息的吧，流程如下：</p><ul><li>通过commentLength\centralDirStartOffset\apkSigningBlockAndOffset找到IdValues的位置</li><li>在IdValues block中找到V2签名的位置，判断是否已经签名</li><li>判断是否使用V3签名，如果有将长度补成4096的倍数(V3签名会校验)</li><li>写入渠道</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>从多渠道打包，引申出了Apk的签名V2签名逻辑(V1类似，但是是放在EOCD的Comment中)，Apk(Zip)包的结构等问题。这里只是简单的做下自我总结，如有疑问欢迎留言，当然你也可以选择去看看官方的文档和大神们的博客。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5ad47f466fb9a028d82c3e29">带你了解腾讯开源的多渠道打包技术 VasDolly源码解析 by 鸿洋</a></li><li><a href="https://juejin.im/post/5c6d6d6a6fb9a049f06ad97e">APK文件结构详解</a>  </li><li><a href="https://github.com/Meituan-Dianping/walle">Meituan-Dianping/walle</a></li><li><a href="https://github.com/Tencent/VasDolly/wiki/VasDolly%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">Tencent/VasDolly</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android事件分发机制(二)</title>
      <link href="/2019/09/23/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6part2/"/>
      <url>/2019/09/23/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6part2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接上节，在这一小节中，我将着重从View和ViewGroup的源码中去探索事件分发的流程是否如上小节分析的那样，带着上一节所留下的疑问开始愉快的阅读源码吧。</p><a id="more"></a><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>先放上小节中总结的流程图：</p><p><img src="https://dreamweaver.img.we1code.cn/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%283%29.png" alt=" "></p><p>在Activity中最终也是走的ViewGroup.dispatchTouchEvent，所以直接看ViewGroup就可以了：</p><p>首先我们要明确一次完整的事件分发包括ACTION_DOWN，若干ACTION_MOVE，ACTION_UP事件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> action <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> actionMasked <span class="token operator">=</span> action <span class="token operator">&amp;</span> MotionEvent<span class="token punctuation">.</span>ACTION_MASK<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Handle an initial down.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Throw away all previous state when starting a new touch gesture.</span>    <span class="token comment" spellcheck="true">// The framework may have dropped the up or cancel event for the previous gesture</span>    <span class="token comment" spellcheck="true">// due to an app switch, ANR, or some other state change.</span>    <span class="token function">cancelAndClearTouchTargets</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">resetTouchState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此处做重置工作，如果当前的MotionEvent是ACTION_DOWN，则cancel所有未执行完的事件，并清除所有的TouchTarget，这个TouchTarget是什么?它记录了所有被点击的View和MotionEvent的id，如果有设置<br>FLAG_DISALLOW_INTERCEPT也会被一并清除掉。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// Check for interception.</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> intercepted<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN        <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> disallowIntercept <span class="token operator">=</span> <span class="token punctuation">(</span>mGroupFlags <span class="token operator">&amp;</span> FLAG_DISALLOW_INTERCEPT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>disallowIntercept<span class="token punctuation">)</span> <span class="token punctuation">{</span>        intercepted <span class="token operator">=</span> <span class="token function">onInterceptTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span>        ev<span class="token punctuation">.</span><span class="token function">setAction</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// restore action in case it was changed</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        intercepted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// There are no touch targets and this action is not an initial down</span>    <span class="token comment" spellcheck="true">// so this view group continues to intercept touches.</span>    intercepted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// If intercepted, start normal event dispatch. Also if there is already</span><span class="token comment" spellcheck="true">// a view that is handling the gesture, do normal event dispatch.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>intercepted <span class="token operator">||</span> mFirstTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ev<span class="token punctuation">.</span><span class="token function">setTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此处判断事件是否被拦截，在这里我们看到了熟悉的onInterceptTouchEvent，当前事件为ACTION_DOWN时，首先会判断有没有设置FLAG_DISALLOW_INTERCEPT标识，这个标识是通过requestDisallowInterceptTouchEvent设置的，一般是子View控制父类不去拦截事件，前面分析到了这个flag会在执行ACTION_DOWN事件时被重置，如果不允许被拦截，那么事件当然交予子View去处理啦，反之，则会执行onInterceptTouchEvent方法。如果是其他的事件，则需要考虑mFirstTouchTarget是否为null，在下面的代码中可以看到如果事件交予子控件处理，那么mFirstTouchTarget将被赋值，因此如果事件没有交予子View处理，mFirstTouchTarget就是null值，那么接下来的所有事件都不会交予子View处理了，而且也不会执行onInterceptTouchEvent。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">final</span> View<span class="token punctuation">[</span><span class="token punctuation">]</span> children <span class="token operator">=</span> mChildren<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> childIndex <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedIndex</span><span class="token punctuation">(</span>childrenCount<span class="token punctuation">,</span> i<span class="token punctuation">,</span> customOrder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> View child <span class="token operator">=</span> <span class="token function">getAndVerifyPreorderedView</span><span class="token punctuation">(</span>preorderedList<span class="token punctuation">,</span> children<span class="token punctuation">,</span> childIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childWithAccessibilityFocus <span class="token operator">!=</span> child<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        childWithAccessibilityFocus <span class="token operator">=</span> null<span class="token punctuation">;</span>        i <span class="token operator">=</span> childrenCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 判断子View是否能收到点击事件和点击事件是否在View内发生</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canViewReceivePointerEvents</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isTransformedTouchPointInView</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> child<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ev<span class="token punctuation">.</span><span class="token function">setTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果子View收不到事件，进行下一从循环，一直到找到目标子View</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    newTouchTarget <span class="token operator">=</span> <span class="token function">getTouchTarget</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newTouchTarget <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Child is already receiving touch within its bounds.</span>        <span class="token comment" spellcheck="true">// Give it the new pointer in addition to the ones it is handling.</span>        newTouchTarget<span class="token punctuation">.</span>pointerIdBits <span class="token operator">|=</span> idBitsToAssign<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Child wants to receive touch within its bounds.</span>        mLastTouchDownTime <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getDownTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preorderedList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// childIndex points into presorted list, find original index</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> childrenCount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>childIndex<span class="token punctuation">]</span> <span class="token operator">==</span> mChildren<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mLastTouchDownIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            mLastTouchDownIndex <span class="token operator">=</span> childIndex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mLastTouchDownX <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mLastTouchDownY <span class="token operator">=</span> ev<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newTouchTarget <span class="token operator">=</span> <span class="token function">addTouchTarget</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> idBitsToAssign<span class="token punctuation">)</span><span class="token punctuation">;</span>        alreadyDispatchedToNewTouchTarget <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// The accessibility focus didn't handle the event, so clear</span>    <span class="token comment" spellcheck="true">// the flag and do a normal dispatch to all children.</span>    ev<span class="token punctuation">.</span><span class="token function">setTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 判断子View能收到点击事件的条件</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canViewReceivePointerEvents</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> View child<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>mViewFlags <span class="token operator">&amp;</span> VISIBILITY_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> VISIBLE        <span class="token operator">||</span> child<span class="token punctuation">.</span><span class="token function">getAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来分发事件到子View，如果子View能收到点击事件，并且点击事件在子View的范围之内，这里判断子View能否收到点击事件的条件在于它是否可见，或子View的mCurrentAnimation不为null。事件交由子View去处理，如果子View处理了该次事件，则会通过addTouchTarget记录起来。确定了事件被消费后，就会结束循环。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>mFirstTouchTarget <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// No touch targets so treat this as an ordinary view.</span>    handled <span class="token operator">=</span> <span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> canceled<span class="token punctuation">,</span> null<span class="token punctuation">,</span> TouchTarget<span class="token punctuation">.</span>ALL_POINTER_IDS<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Dispatch to touch targets, excluding the new touch target if we already</span>    <span class="token comment" spellcheck="true">// dispatched to it.  Cancel touch targets if necessary.</span>    TouchTarget predecessor <span class="token operator">=</span> null<span class="token punctuation">;</span>    TouchTarget target <span class="token operator">=</span> mFirstTouchTarget<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> TouchTarget next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyDispatchedToNewTouchTarget <span class="token operator">&amp;&amp;</span> target <span class="token operator">==</span> newTouchTarget<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> <span class="token keyword">boolean</span> cancelChild <span class="token operator">=</span> <span class="token function">resetCancelNextUpFlag</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">)</span> <span class="token operator">||</span> intercepted<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dispatchTransformedTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">,</span> cancelChild<span class="token punctuation">,</span> target<span class="token punctuation">.</span>child<span class="token punctuation">,</span> target<span class="token punctuation">.</span>pointerIdBits<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                handled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cancelChild<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>predecessor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    mFirstTouchTarget <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    predecessor<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                target<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                target <span class="token operator">=</span> next<span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        predecessor <span class="token operator">=</span> target<span class="token punctuation">;</span>        target <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果没有子View处理这次事件，则会执行super.dispatchTouchEvent，交给View的dispatchTouchEvent处理，代码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>MotionEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// If the event should be handled by accessibility focus first.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">isTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// We don't have focus or no virtual descendant has it, do not handle the event.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAccessibilityFocusedViewOrHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// We have focus and got the event, then use normal event dispatch.</span>        event<span class="token punctuation">.</span><span class="token function">setTargetAccessibilityFocus</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mInputEventConsistencyVerifier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mInputEventConsistencyVerifier<span class="token punctuation">.</span><span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> actionMasked <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getActionMasked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Defensive cleanup for new gesture</span>        <span class="token function">stopNestedScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">onFilterTouchEventForSecurity</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED <span class="token operator">&amp;&amp;</span> <span class="token function">handleScrollBarDragging</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//noinspection SimplifiableIfStatement</span>        ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> null                <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED                <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> mInputEventConsistencyVerifier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mInputEventConsistencyVerifier<span class="token punctuation">.</span><span class="token function">onUnhandledEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Clean up after nested scrolls if this is the end of a gesture;</span>    <span class="token comment" spellcheck="true">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span>    <span class="token comment" spellcheck="true">// of the gesture.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_UP <span class="token operator">||</span>            actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_CANCEL <span class="token operator">||</span>            <span class="token punctuation">(</span>actionMasked <span class="token operator">==</span> MotionEvent<span class="token punctuation">.</span>ACTION_DOWN <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">stopNestedScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在View中的事件分发逻辑就比ViewGroup少多了，咱们挑重点看</p><pre class=" language-java"><code class="language-java">ListenerInfo li <span class="token operator">=</span> mListenerInfo<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>li <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>mViewFlags <span class="token operator">&amp;</span> ENABLED_MASK<span class="token punctuation">)</span> <span class="token operator">==</span> ENABLED <span class="token operator">&amp;&amp;</span> li<span class="token punctuation">.</span>mOnTouchListener<span class="token punctuation">.</span><span class="token function">onTouch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result <span class="token operator">&amp;&amp;</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在这里，可以看到View会先判断OnTouch事件，如果有OnTouchListener成功处理了这次事件，那么就不会执行onTouchEvent方法了。</p><p>至此，Android的事件分发机制就基本分析完了，总的来说，ViewGroup将事件分发给子View，并询问子View是否能处理这次事件，如果事件被拦截了，或者没有子View处理，则执行自己的onTouchEvent，并将dispatchTouchEvent的结果反馈给父类。</p><p>下面有几个疑问，想问下读者，也顺便提醒下自己</p><ul><li>如果ACTION_DOWN事件没有被处理过，那么mFirstTouchTarget一定为null吗？</li><li>可以看到在将事件分发给子View主要是通过dispatchTransformedTouchEvent方法的，在ViewGroup的dispatchTouchEvent中会遍历一次所有的子View，然后通过dispatchTransformedTouchEvent去询问子View是否有处理过事件，但是在dispatchTouchEvent的最后面可以看到，对于mFirstTouchTarget != null时，会再对它做一次事件分发，为什么要这么做呢？</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android事件分发机制(一)</title>
      <link href="/2019/09/21/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6part1/"/>
      <url>/2019/09/21/Android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6part1/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Android事件分发机制是Android开发中最基础的知识，在平时的开发中没有少用，但是确很少总结。温故而知新，为此我决定重新分析一下，也是对自己的经验做下总结。</p><a id="more"></a><pre class=" language-shell"><code class="language-shell">TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchGroup: ==================dispatchTouchEvent==================TestDispatchGroup: ==================onInterceptTouchEvent==================TestDispatchView: ==================dispatchTouchEvent==================TestDispatchView: ==================onTouchEvent==================TestDispatchView: MotionEvent { action=ACTION_DOWN }TestDispatchGroup: ==================onTouchEvent==================TestDispatchGroup: MotionEvent { action=ACTION_DOWN }TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_DOWN }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_MOVE }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_UP }</code></pre><p>当不做任何处理时，发现事件从最外层向最内层传递，最终将事件交回最外层处理，流程图如下:</p><p><img src="https://dreamweaver.img.we1code.cn/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%281%29.png" alt=" "></p><p>可以看到事件从最外层Activity传递到最内层View的onTouchEvent，这时View是把事件交回父类处理的，最终又回到Activity，并在Activity的onTouchEvent消费了ACTION_DOWN，接下来的ACTION_MOVE与ACTION_UP事件则直接在Activity被消费了，并不会再往下分发。</p><p>接下来看看如果在ViewGroup中如果消费了事件，流程又有什么改变。</p><pre class=" language-shell"><code class="language-shell">TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchGroup: ==================dispatchTouchEvent==================TestDispatchGroup: ==================onInterceptTouchEvent==================TestDispatchView: ==================dispatchTouchEvent==================TestDispatchView: ==================onTouchEvent==================TestDispatchView: MotionEvent { action=ACTION_DOWN }TestDispatchGroup: ==================onTouchEvent==================TestDispatchGroup: MotionEvent { action=ACTION_DOWN }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchGroup: ==================dispatchTouchEvent==================TestDispatchGroup: ==================onTouchEvent==================TestDispatchGroup: MotionEvent { action=ACTION_MOVE }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchGroup: ==================dispatchTouchEvent==================TestDispatchGroup: ==================onTouchEvent==================TestDispatchGroup: MotionEvent { action=ACTION_MOVE }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchGroup: ==================dispatchTouchEvent==================TestDispatchGroup: ==================onTouchEvent==================TestDispatchGroup: MotionEvent { action=ACTION_UP }</code></pre><p>可以看到一旦事件被消费了，就不会再往上传递到Activity了，并且在接下来的事件中，事件分发也只会传递到ViewGroup并被它消费掉，流程图如下：</p><p><img src="https://dreamweaver.img.we1code.cn/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%282%29.png" alt=" "></p><p>接下来在ViewGroup的onInterceptTouchEvent中将事件拦截掉，看流程又有何变化。</p><pre class=" language-shell"><code class="language-shell">TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchGroup: ==================dispatchTouchEvent==================TestDispatchGroup: ==================onInterceptTouchEvent==================TestDispatchGroup: ==================onTouchEvent==================TestDispatchGroup: MotionEvent { action=ACTION_DOWN }TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_DOWN }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_MOVE }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_MOVE }TestDispatchAct: ==================dispatchTouchEvent==================TestDispatchAct: ==================onTouchEvent==================TestDispatchAct: MotionEvent { action=ACTION_UP }</code></pre><p>通过日志，可以看到事件被ViewGroup拦截后，不再往下分发，直接执行的是ViewGroup的onTouchEvent，由于此时ViewGroup没有消费事件，所以所有的事件都交还给了Activity去处理，流程如下图所示：</p><p><img src="https://dreamweaver.img.we1code.cn/android%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%283%29.png" alt=" "></p><h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><ul><li>为什么ACTION_DOWN事件逐层分发，但是ViewGroup消费之后就不会继续向下分发了呢？</li></ul><p>要弄清楚这个问题就必须更进一步阅读ViewGroup和View的源码，下一小节中，我将从源码的角度去分析事件分发的原理。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://juejin.im/post/5d3140c951882565dd5a66ef">重学安卓：学习 View 事件分发，就像外地人上了黑车！by KunMinX</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vps搭建ssr服务器</title>
      <link href="/2019/09/21/vps%E6%90%AD%E5%BB%BAssr%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/09/21/vps%E6%90%AD%E5%BB%BAssr%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现最近一些搭建ssr服务器的教程都被迫下线了，心里慌的一匹，原先都是参照教程来搭建的，没有教程我可怎么办，赶紧备份一波。</p><h2 id="vps服务器选择"><a href="#vps服务器选择" class="headerlink" title="vps服务器选择"></a>vps服务器选择</h2><p>原先一直用搬瓦工，因为便宜啊，用了一年多ip被封了，花了将近10美元重置，一天不到又给我封了，遂换成vultr(1RMB一天)，这个比搬瓦工(9.99美元一年)贵上不少，但是好在能随时免费换ip，这个ip被封了，我再换一个。下面的服务商我就没用过了，先记录着，万一哪一天vultr也不好用了呢。  </p><a id="more"></a><table><thead><tr><th>商家</th><th>价格(最低配)</th></tr></thead><tbody><tr><td><a href="https://digital-vm.com">https://digital-vm.com</a></td><td>$4/MONTHLY $41/YEARLY</td></tr><tr><td><a href="https://www.onevps.com">https://www.onevps.com</a></td><td>$4/MONTHLY</td></tr><tr><td><a href="http://www.fastcomet.com">www.fastcomet.com</a></td><td>$2.95/MONTHLY</td></tr><tr><td><a href="https://www.hostkvm.com">https://www.hostkvm.com</a></td><td>$9.5/MONTHLY</td></tr><tr><td><a href="https://www.locvps.com">https://www.locvps.com</a></td><td>68RMB/MONTHLY</td></tr><tr><td><a href="https://zheye.io">https://zheye.io</a></td><td>88RMB/MONTHLY</td></tr><tr><td><a href="https://www.jwdns.com">https://www.jwdns.com</a></td><td>88RMB/MONTHLY</td></tr><tr><td><a href="https://hxkvm.com">https://hxkvm.com</a></td><td>65RMB/MONTHLY</td></tr><tr><td><a href="https://www.gke.cc">https://www.gke.cc</a></td><td>65RMB/MONTHLY</td></tr><tr><td><a href="http://www.aoyouhost.com">www.aoyouhost.com</a></td><td>48RMB/MONTHLY</td></tr></tbody></table><blockquote><p>注1：这里只进行价格对比，详细配置还需自行仔细查看<br>注2：如果选择了vultr，一定要先<a href="ping.chinaz.com">测试一下</a>服务器ip是否被墙了，然后再进行下面的操作，如果被墙了，请换一台服务器再试！</p></blockquote><h2 id="部署-非新手向"><a href="#部署-非新手向" class="headerlink" title="部署(非新手向)"></a>部署(非新手向)</h2><ul><li>安装脚本</li></ul><pre class=" language-shell"><code class="language-shell">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</code></pre><blockquote><p>注：根据脚本提示选择密码，端口号等，最后请小心保存配置信息</p></blockquote><ul><li>安装锐速</li></ul><p>留意看自己服务器所安装的系统，如果是centos6*64，执行如下命令：</p><pre class=" language-shell"><code class="language-shell">wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/hombo125/doubi/master/appex.sh && bash appex.sh install '2.6.32-642.el6.x86_64'</code></pre><p>如果是centos7*64则需先更换系统内核</p><pre class=" language-shell"><code class="language-shell">wget --no-check-certificate -O rskernel.sh https://raw.githubusercontent.com/hombo125/doubi/master/rskernel.sh && bash rskernel.sh</code></pre><p>然后再安装锐速</p><pre class=" language-shell"><code class="language-shell">yum install net-tools -y && wget --no-check-certificate -O appex.sh https://raw.githubusercontent.com/0oVicero0/serverSpeeder_Install/master/appex.sh && bash appex.sh install</code></pre><p>配置信息如下图所示(其实不是很明白第一项为啥选n)</p><p><img src="https://dreamweaver.img.we1code.cn/%E9%94%90%E9%80%9F%E9%85%8D%E7%BD%AE.jpg" alt="锐速配置"></p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>到这里，所有流程都已经走完了，最后提醒大家所有的配置信息一定要妥善保存哟。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p> <a href="https://www.baishitou.cn/1524.html">用VPS搭建SSR服务器教程</a>(写的真的很详细，新手小伙伴可以过去学习一下)</p>]]></content>
      
      
      <categories>
          
          <category> ssr </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语法糖 Part3</title>
      <link href="/2019/04/05/Kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part3/"/>
      <url>/2019/04/05/Kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part3/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在前面的两篇文章中，我们了解到了：</p><ul><li>sealed</li><li>when()</li><li>with()</li><li>inline function and reified type</li></ul><p>在这章中，我会给大家分享我是如何使用Kotlin委托机制的。</p><a id="more"></a><h2 id="Kotlin的委托机制"><a href="#Kotlin的委托机制" class="headerlink" title="Kotlin的委托机制"></a>Kotlin的委托机制</h2><p>Kotlin有一个内置的<a href="https://www.kotlincn.net/docs/reference/delegation.html">委托模式</a>。在一些书中也提及委托模式是实现继承的一个很好的替代方式，在Kotlin使用它进行聚合非常容易：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> Navigable <span class="token punctuation">{</span>    <span class="token keyword">val</span> onNavigationClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">}</span><span class="token keyword">interface</span> Searchable <span class="token punctuation">{</span>    <span class="token keyword">val</span> searchText<span class="token operator">:</span>String<span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Component</span><span class="token punctuation">(</span>navigation<span class="token operator">:</span> Navigable<span class="token punctuation">,</span> searchable<span class="token operator">:</span> Searchable<span class="token punctuation">)</span><span class="token operator">:</span> Navigable <span class="token keyword">by</span> navigable<span class="token punctuation">,</span> Searchabe <span class="token keyword">by</span> searchable</code></pre><p>使用by关键字，即可委托navigation、searchable的所有行为。比起Java，Kotlin减少了大量的模板代码。如果你把interface标记为internal，你会发现编译不能通过</p><blockquote><p>‘public’ function exposes its ‘internal’ parameter type xxx  </p></blockquote><p>Kotlin编译器不允许暴露模块的内部组件，如果想在不暴露Navigable，Searchable的前提下解决这个问题，你只需要做：</p><ul><li>移除构造器</li><li>使用组合代替聚合</li><li>定义包含Navigable和Searchable方法名的ComponentInterface</li></ul><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> ComponentInterface <span class="token punctuation">{</span>    <span class="token keyword">val</span> onNavigationClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token operator">?</span>    <span class="token keyword">var</span> searchText<span class="token operator">:</span> String<span class="token punctuation">}</span><span class="token keyword">class</span> Component<span class="token operator">:</span> ComponentInterface <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> navigable<span class="token operator">:</span> Navigable <span class="token operator">=</span> <span class="token function">NavigableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> searchable<span class="token operator">:</span> Searchable <span class="token operator">=</span> <span class="token function">SearchableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> onNavigationClick<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span><span class="token operator">?</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> navigable<span class="token punctuation">.</span>onNavigationClick    <span class="token keyword">override</span> <span class="token keyword">var</span> searchText<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> searchable<span class="token punctuation">.</span>searchText        <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            field <span class="token operator">=</span> value            searchable<span class="token punctuation">.</span>searchText <span class="token operator">=</span> value        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>经过改造后，你发现代码从零模板的聚合变成了看上去很讨厌的组合方式。但是先别哭，Kotlin总能给你带来愉悦的编码体验。Kotlin不仅支持使用by关键字对指定对象进行方法委派，还具有委托属性的机制。你可能已经在使用lazy关键字初始化对象时接触到了它的这一机制了。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">private</span> <span class="token keyword">val</span> lazyProperty <span class="token keyword">by</span> lazy <span class="token punctuation">{</span> <span class="token string">""</span> <span class="token punctuation">}</span></code></pre><p>怎么从使用lazy()上来改造上面组合的代码呢，请看代码：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> ReferencedProperty<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> <span class="token keyword">get</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> T<span class="token punctuation">,</span>                            <span class="token keyword">private</span> <span class="token keyword">val</span> <span class="token keyword">set</span><span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    operator <span class="token keyword">fun</span> <span class="token function">getValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span>                          property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    operator <span class="token keyword">fun</span> <span class="token function">setValue</span><span class="token punctuation">(</span>thisRef<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">,</span>                          property<span class="token operator">:</span> KProperty<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">,</span>                          value<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">ref</span><span class="token punctuation">(</span>property<span class="token operator">:</span> KMutableProperty0<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ReferencedProperty</span><span class="token punctuation">(</span>property<span class="token operator">::</span><span class="token keyword">get</span><span class="token punctuation">,</span>                                                                 property<span class="token operator">::</span><span class="token keyword">set</span><span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">ref</span><span class="token punctuation">(</span>property<span class="token operator">:</span> KProperty0<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ReferencedProperty</span><span class="token punctuation">(</span>property<span class="token operator">::</span><span class="token keyword">get</span><span class="token punctuation">)</span></code></pre><p>ReferencedProperty用两个方法作为参数，并定义了两个函数：</p><ul><li>get函数返回泛型T</li><li>set函数以T作为参数</li><li>getValue()调用get()</li><li>setValue()调用set()</li></ul><p>最重要的一点是你需要知道操作符用到了属性代理机制。在ReferencedProperty类下，你会发现两个返回ReferencedProperty的泛型方法，第一个用于var，第二个用于val。<br>现在让我们用ref()简化代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> Component <span class="token operator">:</span> ComponentInterface <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> navigable<span class="token operator">:</span> Navigable <span class="token operator">=</span> <span class="token function">NavigableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">val</span> searchable<span class="token operator">:</span> Searchable <span class="token operator">=</span> <span class="token function">SearchableImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">val</span> onNavigationClick <span class="token keyword">by</span> <span class="token function">ref</span><span class="token punctuation">(</span>navigable<span class="token operator">::</span>onNavigationClick<span class="token punctuation">)</span>    <span class="token keyword">override</span> <span class="token keyword">var</span> searchText <span class="token keyword">by</span> <span class="token function">ref</span><span class="token punctuation">(</span>searchable<span class="token operator">::</span>searchText<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>希望看完这三章你能有些许收获。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://medium.com/grand-parade/6-magic-sugars-that-can-make-your-kotlin-codebase-happier-part-3-6319a451cd5d">6 magic sugars that can make your Kotlin codebase happier — Part 3</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语法糖 Part2</title>
      <link href="/2019/03/30/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part2/"/>
      <url>/2019/03/30/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part2/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在第一章中，我们学会了如何使用sealed classes，以及when()配合Pair或Triple使用做多重条件判断。  在这一章中，我想跟大家分享一下with()和inline reified的基本使用。  </p><a id="more"></a><h2 id="使用with-函数"><a href="#使用with-函数" class="headerlink" title="使用with()函数"></a>使用with()函数</h2><p>with()函数位于<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt">Standard.kt</a>，是Kotlin标准函数之一，大家可以看看，掌握好这些函数对于我们简化编程有很大的帮助，有时间我会另开一章分享我平时使用到它们的地方，当然也非常欢迎大家评论分享使用技巧。<br>假设你从未使用过with()函数，我们可以先看看源码：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">with</span><span class="token punctuation">(</span>receiver<span class="token operator">:</span> T<span class="token punctuation">,</span> block<span class="token operator">:</span> T<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> R<span class="token punctuation">)</span><span class="token operator">:</span> R</code></pre><blockquote><p>Calls the specified function block with the given receiver as its receiver and returns its result.</p></blockquote><p>大体的意思是调用receiver中的方法然后返回它的结果：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> receiver<span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string">"Fructos"</span><span class="token keyword">val</span> block<span class="token operator">:</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">val</span> result<span class="token operator">:</span> Unit <span class="token operator">=</span> with<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Unit<span class="token operator">></span><span class="token punctuation">(</span>receiver<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//简化一下代码</span><span class="token function">with</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在block中你可以调用到receiver的方法而且不需要任何限定符，在block的最后返回你需要的数据类型就可以了。在项目中我经常使用它在p层传递限定符像是view.show(),view.hide()</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">interface</span> View <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token function">Presenter</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> view<span class="token operator">:</span> View<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">present</span><span class="token punctuation">(</span>isFructos<span class="token operator">:</span>Boolean<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFructos<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="inline-reified"><a href="#inline-reified" class="headerlink" title="inline reified"></a>inline reified</h2><p>我们先分析一下下面的代码</p><pre class=" language-kotlin"><code class="language-kotlin">abstact <span class="token keyword">class</span> Item<span class="token keyword">class</span> MediaItem<span class="token operator">:</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> media <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">class</span> IconItem<span class="token operator">:</span> <span class="token function">Item</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> icon <span class="token operator">=</span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token keyword">interface</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span>Item<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">class</span> MediaItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!</span><span class="token keyword">is</span> MediaItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Item is not an instance of MediaItem"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        view<span class="token punctuation">.</span><span class="token function">showMedia</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>media<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> IconItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> Viewm<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>item <span class="token operator">!</span><span class="token keyword">is</span> IconItem<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Item is not an instance of IconItem"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        view<span class="token punctuation">.</span><span class="token function">showIcon</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>icon<span class="token punctuation">)</span>        view<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上述代码有很多冗余的地方，其实很明显你就能看出MediaItemRenderer和IconItemRenderer在render()函数中存在着相同的逻辑，现在，我们用inline reified来改造它，首先将render函数中的逻辑提取出来：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">withCorrectType</span><span class="token punctuation">(</span>toBeChecked<span class="token operator">:</span> Item<span class="token punctuation">,</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>toBeChecked <span class="token operator">!</span><span class="token keyword">is</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token function">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"invalid Type"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    block<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>toBeChecked<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>然而，这样做并不能通过编译，会报错</p><blockquote><p>Cannot check for instance of erased type: T  </p></blockquote><p>产生这种错误是因为泛型机制。</p><blockquote><p>During the type erasure process, the Java compiler erases all type parameters and replaces each with its first bound if the type parameter is bounded,or Object if the type parameter is unbounded.-docs.oracle.com</p></blockquote><p>so, 可以防止防止泛型T被清除吗？在Kotlin中一切都有可能，使用inline reified，就能修复这个问题。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">class</span> MediaItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        withCorrectType<span class="token operator">&lt;</span>MediaItem<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            show <span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> IconItemRenderer<span class="token operator">:</span> Renderer <span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">render</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> item<span class="token operator">:</span> Item<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span> <span class="token punctuation">{</span>        withCorrectType<span class="token operator">&lt;</span>IconItem<span class="token operator">></span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            show <span class="token punctuation">{</span>it<span class="token punctuation">.</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span><span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">></span> <span class="token function">withCorrectType</span><span class="token punctuation">(</span>toBeChecked<span class="token operator">:</span> Item<span class="token punctuation">,</span> block<span class="token operator">:</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>toBeChecked <span class="token operator">!</span><span class="token keyword">is</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token punctuation">}</span>    block<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>toBeChecked<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>使用reified修饰符Kotlin compiler保留了你的类型，当然这是必须在使用inline的前提下。</p><p>以上就是第二章的全部了，在第三章中我们将展示更多的Kotlin小技巧。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://medium.com/grand-parade/6-magic-sugars-that-can-make-your-kotlin-codebase-happier-part-2-843bf096fa45">6 magic sugars that can make your Kotlin codebase happier — Part 2</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin语法糖 Part1</title>
      <link href="/2019/03/23/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part1/"/>
      <url>/2019/03/23/kotlin%E8%AF%AD%E6%B3%95%E7%B3%96Part1/</url>
      
        <content type="html"><![CDATA[<p>Kotlin给我们提供了大量的工具和语法糖让我们能够更为便利的去编程，让代码有更好的可读性和可扩展性。写更少的代码做更多的事，用这句话概括Kotlin和Java之间的差异一点都不为过。面对Kotlin这种能减轻我们工作量的工具，我们有什么理由不去学习它呢？我相信有效地使用Kotlin会对你的身心带来巨大的愉悦，在使用Kotlin的过程中，它的简洁和优雅的语法不断地给我带来惊喜，可能这也是Google使用它作为Android官方编程语言的原因吧。Kotlin的语法糖有很多，我至今也还在学习中，接下来我将用三篇文章的篇幅将目前我使用较多的介绍给大家。这篇文章是这个系列的第一章，在这张中我们主要来了解下密封类(sealed class)的用法。</p><a id="more"></a><h2 id="密封类-sealed-class"><a href="#密封类-sealed-class" class="headerlink" title="密封类(sealed class)"></a>密封类(sealed class)</h2><p>用sealed关键字修饰的类我们称之为密封类，在<a href="https://www.kotlincn.net/docs/reference/sealed-classes.html">官方文档</a>中是这么介绍的  </p><blockquote><p>密封类用来表示受限的类继承结构，当一个值为有限集中的类型、而不能有任何其他类型。</p></blockquote><p>这是不是很枚举类很相似呢，我认为sealed class比枚举的用法更为灵活，每个枚举类只能存在一个实例，但是密封类的子类可以包含多个不同内部状态的实例。上代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">sealed</span> <span class="token keyword">class</span> Response<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Success</span><span class="token punctuation">(</span><span class="token keyword">val</span> body<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token keyword">val</span> code<span class="token operator">:</span> Int<span class="token punctuation">,</span> <span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">object</span> Timeout<span class="token operator">:</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>sealed class 自身抽象，它不能直接实例化，但是可以有abstract成员。我们使用IntelliJ IDEA Kotlin Bytecode工具将上面的代码还原程Java代码。</p><p>1.Reveal Koltin Bytecode</p><p><img src="https://dreamweaver.img.we1code.cn/kotlin_syntax_pic_2.png" alt="pic_1" title="1.Reveal Kotlin Bytecode"></p><p>2.Decompile Kotlin Bytecode to Java code</p><p><img src="https://dreamweaver.img.we1code.cn/kotlin_syntax_pic_1.png" alt="pic_2" title="2.Decompile Kotlin Bytecode to Java code"></p><p>经过这几步，就可以开始阅读转换后Java代码了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">{</span>   <span class="token keyword">private</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// $FF: synthetic method</span>   <span class="token keyword">public</span> <span class="token function">Response</span><span class="token punctuation">(</span>DefaultConstructorMarker $constructor_marker<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>你可能已经在想，seald classes专门为继承而生，因此他们是抽象的。但是，他们怎么会类似enums?下面是Kotlin编译器通过允许您使用Response类的子类作为(as case of)when（）函数的条件时给您带来巨大帮助的时候了。另外，kotlin提供了极大的灵活性(flexibility)，继承sealed class的对象可以<br>是一个data class(数据类)或object</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sugar</span><span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Success <span class="token operator">-></span> <span class="token operator">..</span><span class="token punctuation">.</span>    <span class="token keyword">is</span> Error <span class="token operator">-></span> <span class="token operator">..</span><span class="token punctuation">.</span>    Timeout <span class="token operator">-></span> <span class="token operator">..</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>这样的代码看上去不仅仅是结构清晰，在使用它时，你甚至不用去做额外的强制转换，在条件语句的最后也不再需要else子句了，我们已经覆盖了所有的情况。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">sugar</span><span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">is</span> Success <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token punctuation">)</span>    <span class="token keyword">is</span> Error <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token delimiter variable">${</span>response<span class="token punctuation">.</span>code<span class="token delimiter variable">}</span></span> <span class="token interpolation"><span class="token delimiter variable">${</span>response<span class="token punctuation">.</span>message<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span>    Timeout <span class="token operator">-></span> <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>javaClass<span class="token punctuation">.</span>simpleName<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>不使用sealed关键字的代码是怎样的？可以用IntelliJ IDEA Kotlin Bytecode转换成Java看下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sugar</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> Response response<span class="token punctuation">)</span> <span class="token punctuation">{</span>   Intrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   String var3<span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">Success</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      var3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Success<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      var3 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Error<span class="token punctuation">)</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Intrinsics<span class="token punctuation">.</span><span class="token function">areEqual</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> Timeout<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoWhenBranchMatchedException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      var3 <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可见使用Kotlin我们减少了多少代码量。</p><h2 id="使用when-方法自由的排列组合"><a href="#使用when-方法自由的排列组合" class="headerlink" title="使用when()方法自由的排列组合"></a>使用when()方法自由的排列组合</h2><p>接下来我们看看枚举类和when()的配合。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">enum</span> <span class="token keyword">class</span> Employee <span class="token punctuation">{</span>    DEV_LEAD<span class="token punctuation">,</span>    SENIOR_ENGINEER<span class="token punctuation">,</span>    REGULAR_ENGINEER<span class="token punctuation">,</span>    JUNIOR_ENGINEER<span class="token punctuation">}</span><span class="token keyword">enum</span> <span class="token keyword">class</span> Contract <span class="token punctuation">{</span>    PROBATION<span class="token punctuation">,</span>    PERMANENT<span class="token punctuation">,</span>    CONTRACTOR<span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>Employee枚举定义了Company中的所有角色，Contract枚举包含了所有类型的员工合同。通过这两个枚举的排列组合我们要返回正确的SafariBookAccess。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">,</span>           contract<span class="token operator">:</span> Contract<span class="token punctuation">)</span><span class="token operator">:</span> SafariBookAccess</code></pre><p>然后用定义SafariBooksAccess</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">sealed</span> <span class="token keyword">class</span> SafariBookAccess<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token keyword">val</span> expirationDate<span class="token operator">:</span> DateTime<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">SafariBookAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token keyword">val</span> error<span class="token operator">:</span> AssertionError<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">SafariBookAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token keyword">val</span> message<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">SafariBookAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在access()方法中做排列组合</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>employee<span class="token operator">:</span> Employee<span class="token punctuation">,</span>           contract<span class="token operator">:</span> Contract<span class="token punctuation">)</span><span class="token operator">:</span> SafariBookAccess <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SENIOR_ENGINEER <span class="token operator">-></span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PROBATION <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PERMANENT <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            CONTRACTOR <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        REGULAR_ENGINEER <span class="token operator">-></span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PROBATION <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PERMANENT <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            CONTRACTOR <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access blocked for <span class="token interpolation variable">$contract</span>."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        JUNIOR_ENGINEER <span class="token operator">-></span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract<span class="token punctuation">)</span> <span class="token punctuation">{</span>            PROBATION <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            PERMANENT <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access blocked for <span class="token interpolation variable">$contract</span>."</span><span class="token punctuation">)</span>            CONTRACTOR <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access blocked for <span class="token interpolation variable">$contract</span>."</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>emm，这样写不够简洁，上述代码存在以下问题：</p><ul><li>过多的when()方法。可以用Pair避免嵌套(nesting)</li><li>改变枚举类参数的顺序，使用Pair&lt;Contract, Employee&gt;()提高可读性</li><li>将返回相同的case合并</li><li>改为单表达式函数(<a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions">Single-Expression functions</a>)</li></ul><p>然后，我们来改造一下这段代码</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>contract<span class="token operator">:</span> Contract<span class="token punctuation">,</span>           employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span><span class="token function">Pair</span><span class="token punctuation">(</span>contract<span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PROBATION<span class="token punctuation">,</span> SENIOR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PROBATION<span class="token punctuation">,</span> REGULAR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PROBATION<span class="token punctuation">,</span> JUNIOR_ENGINEER<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PERMANENT<span class="token punctuation">,</span> SENIOR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PERMANENT<span class="token punctuation">,</span> REGULAR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>PERMANENT<span class="token punctuation">,</span> JUNIOR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>CONTRACTOR<span class="token punctuation">,</span> SENIOR_ENGINEER<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>CONTRACTOR<span class="token punctuation">,</span> REGULAR_ENGINEER<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">Pair</span><span class="token punctuation">(</span>CONTRACTOR<span class="token punctuation">,</span> JUNIOR_ENGINEER<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access for junior contractors is blocked."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Unsupported case of <span class="token interpolation variable">$employee</span> and <span class="token interpolation variable">$contract</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>现在看上去是不是很简洁了，但是还能更加简洁：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> <span class="token function">access</span><span class="token punctuation">(</span>contract<span class="token operator">:</span> Contract<span class="token punctuation">,</span>           employee<span class="token operator">:</span> Employee<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>contract <span class="token keyword">to</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PROBATION <span class="token keyword">to</span> SENIOR_ENGINEER<span class="token punctuation">,</span>    PROBATION <span class="token keyword">to</span> REGULAR_ENGINEER <span class="token operator">-></span> <span class="token function">NotGranted</span><span class="token punctuation">(</span><span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Access not allowed on probation contract."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    PERMANENT <span class="token keyword">to</span> SENIOR_ENGINEER<span class="token punctuation">,</span>    PERMANENT <span class="token keyword">to</span> REGULAR_ENGINEER<span class="token punctuation">,</span>    PERMANENT <span class="token keyword">to</span> JUNIOR_ENGINEER<span class="token punctuation">,</span>    CONTRACTOR <span class="token keyword">to</span> SENIOR_ENGINEER <span class="token operator">-></span> <span class="token function">Granted</span><span class="token punctuation">(</span><span class="token function">DateTime</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    CONTRACTOR <span class="token keyword">to</span> REGULAR_ENGINEER<span class="token punctuation">,</span>    PROBATION <span class="token keyword">to</span> JUNIOR_ENGINEER<span class="token punctuation">,</span>    CONTRACTOR <span class="token keyword">to</span> JUNIOR_ENGINEER <span class="token operator">-></span> <span class="token function">Blocked</span><span class="token punctuation">(</span><span class="token string">"Access for junior contractors is blocked."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span> <span class="token operator">-></span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string">"Unsupported case of <span class="token interpolation variable">$employee</span> and <span class="token interpolation variable">$contract</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>希望这些语法糖能对你有所帮助，剩下的我们将在Part2中讲解。</p><p>转自 <a href="https://medium.com/grand-parade/6-magic-sugars-that-can-make-your-kotlin-codebase-happier-part-1-ceee3c2bc9d3">Piotr Ślesarew @ Medium 6 magic sugars that can make your Kotlin codebase happier — Part 1</a><br>编写 <a href="http://we1code.cn/me">snoopy@we1code.cn</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin作用域函数(Scope Functions)</title>
      <link href="/2019/03/22/Kotlin%E5%9F%BA%E7%A1%80-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%87%BD%E6%95%B0/"/>
      <url>/2019/03/22/Kotlin%E5%9F%BA%E7%A1%80-%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Kotlin中有5种<a href="https://www.kotlincn.net/docs/reference/scope-functions.html">作用域函数</a>，分别是：  </p><blockquote><p>let, run, with, apply, and also  </p></blockquote><p>它们并没有任何特性，但是使用他们可以让我们的代码更加简洁，具备更好的可读性。我们可以在<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt">这</a>找到它们的源码。下面我将分析这些方法的区别。</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可以看到其实文档上已经有说明了，它们之间的区别在于：</p><ul><li>引用上下文的方式</li><li>返回值</li></ul><p>每个作用域函数使用两种访问上下文对象的方式之一：作为lambda接收器（this）或作为lambda自变量（it）。两者都提供相同的功能，因此我将描述在每种情况下的利弊，并提供有关其用法的建议。</p><h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p>run, with, apply通过关键字this将上下文作为lambda的接收器。因此，在其lambda中，该对象的用法跟在普通类函数中一样。在大多数情况下，可以省略this直接使用接收器对象的成员变量，从而使代码更加简洁。但是如果省略了this，就很难区分出接收器对象的成员变量和外部变量或方法。因此，如果在lambda中操作对象，像是调用它的方法或是给属性赋值，推荐使用这三种作用域函数。</p><h3 id="it"><a href="#it" class="headerlink" title="it"></a>it</h3><p>let, also将上下文对象作为lambda表达式的参数。如果在作用域中没有定义参数名，则默认为it。it比this更短，使用it的表达式更加易读。但是在调用对象方法和参数时，不能像this一样隐式调用。因此，<br>当对象被用作方法参数时，推荐使用这两种作用域函数。</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>apply, also 返回上下文对象</li><li>let, run, with 返回lambda表达式的结果</li></ul><h2 id="如何选择使用"><a href="#如何选择使用" class="headerlink" title="如何选择使用"></a>如何选择使用</h2><p>为了更方便我们选择使用，官方给出了不少示例</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let 可以被用在在调用链的结果上执行一个或者多个方法。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span>numbers<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// and more function calls if needed</span><span class="token punctuation">}</span></code></pre><p>如果代码块中只有一个方法，并将it作为参数，可以将lambda简写成(::)</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token string">"four"</span><span class="token punctuation">,</span> <span class="token string">"five"</span><span class="token punctuation">)</span>numbers<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">></span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">let</span><span class="token punctuation">(</span><span class="token operator">::</span>println<span class="token punctuation">)</span></code></pre><p>let经常被用在执行non-null values的代码块。要对非空对象进行操作，需要使用安全操作符?.</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> str<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token comment" spellcheck="true">//processNonNullString(str)       // compilation error: str can be null</span><span class="token keyword">val</span> length <span class="token operator">=</span> str<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"let() called on <span class="token interpolation variable">$it</span>"</span><span class="token punctuation">)</span>    <span class="token function">processNonNullString</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// OK: 'it' is not null inside '?.let { }'</span>    it<span class="token punctuation">.</span>length<span class="token punctuation">}</span></code></pre><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><p>官方建议使用with不返回结果(“with this object, do the following.”)，如下：</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token string">"three"</span><span class="token punctuation">)</span><span class="token function">with</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"'with' is called with argument <span class="token interpolation variable">$this</span>"</span><span class="token punctuation">)</span>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"It contains <span class="token interpolation variable">$size</span> elements"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>当你的lambda表达式中含有对象的初始化和返回值的计算时run就很有用了。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> service <span class="token operator">=</span> <span class="token function">MultiportService</span><span class="token punctuation">(</span><span class="token string">"https://example.kotlinlang.org"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token keyword">val</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{</span>    port <span class="token operator">=</span> <span class="token number">8080</span>    <span class="token function">query</span><span class="token punctuation">(</span><span class="token function">prepareRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to port <span class="token interpolation variable">$port</span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// the same code written with let() function:</span><span class="token keyword">val</span> letResult <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span>    it<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">8080</span>    it<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">prepareRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" to port <span class="token interpolation"><span class="token delimiter variable">${</span>it<span class="token punctuation">.</span>port<span class="token delimiter variable">}</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>主要用作操作接收对象的成员，最典型的例子就是对象的配置。可以理解成”apply the following assignments to the object”。</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> adam <span class="token operator">=</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"Adam"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>    age <span class="token operator">=</span> <span class="token number">32</span>    city <span class="token operator">=</span> <span class="token string">"London"</span><span class="token punctuation">}</span></code></pre><p>将接收对象作为返回值，你能很容易的将apply置入调用链中做更为复杂的处理。</p><h3 id="also"><a href="#also" class="headerlink" title="also"></a>also</h3><p>also适用于将上下文对象作为参数的操作。also可以用作不改变对象的额外操作，像是打印日志或打印调试信息。通常，你可以从调用链中移除also而不会破坏程序原有的逻辑。可以将also理解成”and also do the following”。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以参考下面的流程图<br><img src="http://dreamweaver.img.we1code.cn/kotlin_standard_function_use_flow.png" alt="flow"></p><p>官方给出的对比表格：  </p><table><thead><tr><th>Function</th><th>Object reference</th><th>Return value</th><th>Is extension function</th></tr></thead><tbody><tr><td>let</td><td>it</td><td>Lambda result</td><td>Yes</td></tr><tr><td>run</td><td>this</td><td>Lambda result</td><td>Yes</td></tr><tr><td>run</td><td>-</td><td>Lambda result</td><td>No: called without the context object</td></tr><tr><td>with</td><td>this</td><td>Lambda result</td><td>No: takes the context object as an argument</td></tr><tr><td>apply</td><td>this</td><td>Context object</td><td>Yes</td></tr><tr><td>also</td><td>it</td><td>Context object</td><td>Yes</td></tr></tbody></table><p>一句话总结：</p><ul><li>对非空对象执行lambda：let</li><li>将表达式作为局部变量引入：let</li><li>对象配置：apply</li><li>对象配置并计算结果：run</li><li>需要表达式的运行语句：no-extension run</li><li>额外的操作：also</li><li>将对象的调用方法分组：with</li></ul><h2 id="总结语"><a href="#总结语" class="headerlink" title="总结语"></a>总结语</h2><p>尽管作用域方法可以使代码更为简洁，但是请避免过度使用它：这样会减少代码的可读性并且可能导致错误。避免嵌套作用域函数，链式调用它们的时候要格外小心。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.kotlincn.net/docs/reference/scope-functions.html">作用域函数</a><br><a href="https://github.com/JetBrains/kotlin/blob/master/libraries/stdlib/src/kotlin/util/Standard.kt">kotlin standard function</a></p>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kotlin Lambda and Extension</title>
      <link href="/2019/03/22/kotlin%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
      <url>/2019/03/22/kotlin%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="Extension-Function-扩展函数"><a href="#Extension-Function-扩展函数" class="headerlink" title="Extension Function(扩展函数)"></a>Extension Function(扩展函数)</h3><blockquote><p>Extension Function 能在已经存在的类中添加新的方法或者属性，即使这些类来自库或者SDK中。在函数内部，我们可以访问类的公共函数和属性而不需要任何限定符，就好像这个函数就在这个类的内部一样。（注意：从技术上将，它并没有修改现有类，只是在声明的类中创建了static public final函数）</p></blockquote><a id="more"></a><p>举个栗子</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> KotMain <span class="token punctuation">{</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">val</span> person <span class="token operator">=</span> <span class="token string">"snoopy"</span>        person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> String<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>sth<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation variable">$this</span> say <span class="token interpolation variable">$sth</span>"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>反编译后我们可以看到生成的java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KotMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> KotMain INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Instrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"args"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String person <span class="token operator">=</span> <span class="token string">"snoopy"</span><span class="token punctuation">;</span>        INSTANCE<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NotNull</span> String $<span class="token keyword">this</span>$say<span class="token punctuation">,</span> <span class="token annotation punctuation">@NotNull</span> String sth<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Instrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>$<span class="token keyword">this</span>$say<span class="token punctuation">,</span> <span class="token string">"$this$say"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Instrinsics<span class="token punctuation">.</span><span class="token function">checkParameterIsNotNull</span><span class="token punctuation">(</span>sth<span class="token punctuation">,</span> <span class="token string">"sth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String var3 <span class="token operator">=</span> $<span class="token keyword">this</span>$say <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> sth<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到只是增加了一个final方法。</p><p>接下来看看如何在Android项目中运用它</p><ul><li><p>可以生成任何Android View实例的函数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span><span class="token operator">&lt;</span><span class="token keyword">reified</span> V<span class="token operator">:</span> View<span class="token operator">></span> <span class="token function">v</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">,</span> <span class="token keyword">init</span><span class="token operator">:</span> V<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span><span class="token operator">:</span> V<span class="token punctuation">{</span>    <span class="token keyword">val</span> instance <span class="token operator">=</span> V<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>context<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>    <span class="token keyword">val</span> view <span class="token operator">=</span> instace<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>    view<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> view<span class="token punctuation">}</span></code></pre></li><li><p>dp-px拓展</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">fun</span> View<span class="token punctuation">.</span><span class="token function">dp2px</span><span class="token punctuation">(</span>dp<span class="token operator">:</span> Float<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> TypedValue<span class="token punctuation">.</span><span class="token function">applyDimension</span><span class="token punctuation">(</span>TypedValue<span class="token punctuation">.</span>COMPLEX_UNIT_DIP<span class="token punctuation">,</span> dp<span class="token punctuation">,</span> context<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>displayMetrics<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li><li><p>添加fragment</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> FragmentManager<span class="token punctuation">.</span><span class="token function">inTransaction</span><span class="token punctuation">(</span>func<span class="token operator">:</span> FragmentTransaction<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">val</span> fragmentTransaction <span class="token operator">=</span> <span class="token function">begainTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fragmentTransaction<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fragmentTransaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用</span>supportFragmentManager<span class="token punctuation">.</span><span class="token function">inTransaction</span> <span class="token punctuation">{</span>    <span class="token function">add</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>container<span class="token punctuation">,</span> fragment<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//other operation</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="High-Order-Function"><a href="#High-Order-Function" class="headerlink" title="High Order Function"></a>High Order Function</h3><p>High Order Function 在 kotlin 的官网中有很明确的解释:</p><blockquote><p><a href="https://kotlinlang.org/docs/reference/lambdas.html#higher-order-functions">Higher-Order Functions</a><br>A higher-order function is a function that takes functions as parameters, or returns a function.<br>高阶函数是将函数作为参数或返回函数的函数。</p></blockquote><p>High Order Function 中函数作为参数的情况</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">test1</span><span class="token punctuation">(</span>func<span class="token operator">:</span>Int<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">fun</span> Int<span class="token punctuation">.</span><span class="token function">test2</span><span class="token punctuation">(</span>func<span class="token operator">:</span>Int<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token keyword">int</span> $<span class="token keyword">this</span>$test1<span class="token punctuation">,</span> Function1 call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    call<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>$<span class="token keyword">this</span>$test<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span>Function1 call<span class="token punctuation">)</span> <span class="token punctuation">{</span>    call<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h3 id="Lambda-with-Receiver"><a href="#Lambda-with-Receiver" class="headerlink" title="Lambda with Receiver"></a>Lambda with Receiver</h3><p>什么是Lambda with Receiver? Extension Function + Lambda = Lambda with Receiver，它允许你在没有任何限定符的情况下调用lambda中对象的方法。</p><h3 id="inline-function"><a href="#inline-function" class="headerlink" title="inline function"></a>inline function</h3><p>在kotlin中，函数是一等公民，所以我们可以传递函数或者像其它普通类型一样返回它们。然而，这些函数在运行时可能会产生一些性能上的问题，它们作为对象存储造成了额外的内存开销，这时候就轮到inline登场了，在一些使用High Order Function的场景中，我们一般用inline（内联）去修饰它，这样可以减少调用开销。我们依然从源码出发，通过反编译，看看使用High Order Function编译成Java是什么样子的。  </p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">object</span> KotMain <span class="token punctuation">{</span>    <span class="token annotation builtin">@JvmStatic</span>    <span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        noInline <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        inlineFunc <span class="token punctuation">{</span>            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">fun</span> <span class="token function">noInline</span><span class="token punctuation">(</span>call<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">inlineFunc</span><span class="token punctuation">(</span>call<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>再来看看java代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">KotMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> KotlinMain INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//no inline</span>        INSTANCE<span class="token punctuation">.</span><span class="token function">noInline</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//inline</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">noInline</span><span class="token punctuation">(</span>Function func<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用前"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        func<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用后"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>大家可以非常直观的看到结论，不使用内联修饰符，每次调用这个函数都会初始化一个Function实例，显然会造成内存开销，而使用内联修饰符，不会创建Function实例，而会将回调函数内部的代码复制到call site中。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://www.jianshu.com/p/7496715ba2fd">kotlin-extension function</a><br><a href="http://hengyunabc.github.io/kotlin-extension-functions/">Kotlin里的Extension Functions实现原理分析</a><br><a href="https://medium.com/thoughts-overflow/how-to-add-a-fragment-in-kotlin-way-73203c5a450b">How to Add a Fragment the Kotlin way</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Room原理浅析</title>
      <link href="/2019/03/21/Room%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/"/>
      <url>/2019/03/21/Room%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>Room是Google推出的数据库处理框架，Jetpack中的一员</p></blockquote><h2 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h2><pre class=" language-groovy"><code class="language-groovy">androidx<span class="token operator">.</span>room<span class="token punctuation">:</span>room<span class="token operator">-</span>common<span class="token punctuation">:</span><span class="token number">2.2</span><span class="token operator">.</span><span class="token number">3</span>androidx<span class="token operator">.</span>room<span class="token punctuation">:</span>room<span class="token operator">-</span>runtime<span class="token punctuation">:</span><span class="token number">2.2</span><span class="token operator">.</span><span class="token number">3</span>androidx<span class="token operator">.</span>room<span class="token punctuation">:</span>room<span class="token operator">-</span>compiler<span class="token punctuation">:</span><span class="token number">2.2</span><span class="token operator">.</span><span class="token number">3</span></code></pre><a id="more"></a><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>声明一个抽象类继承RoomDatabase，在这个类中主要是写一些getDao的方法，同时也需要用Database注解这个类，告知compiler这个数据库的实体类/版本号等信息，如下示例</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Database</span><span class="token punctuation">(</span>entities<span class="token operator">=</span><span class="token punctuation">[</span>Fruit<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>Meat<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">,</span>version<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> AppDataBase<span class="token operator">:</span><span class="token function">RoomDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getFruitDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>FruitDao    <span class="token keyword">abstract</span> <span class="token keyword">fun</span> <span class="token function">getMeatDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>MeatDao<span class="token punctuation">}</span></code></pre><p>dao文件的声明如下</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Dao</span><span class="token keyword">interface</span> FruitDao<span class="token punctuation">{</span>    <span class="token annotation builtin">@Insert</span><span class="token punctuation">(</span>onConflict<span class="token operator">=</span>OnConflictStrategy<span class="token punctuation">.</span>REPLACE<span class="token punctuation">)</span>    <span class="token keyword">fun</span> <span class="token function">insertFruit</span><span class="token punctuation">(</span>fruit<span class="token operator">:</span>Fruit<span class="token punctuation">)</span>        <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM fruit"</span><span class="token punctuation">)</span>        <span class="token keyword">fun</span> <span class="token function">deleteFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string">"SELECT*FROM fruit"</span><span class="token punctuation">)</span>        <span class="token keyword">fun</span> <span class="token function">queryFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Fruit    <span class="token punctuation">}</span></code></pre><p>好了，通过下面的方法我们就能拿到database对象了，有了RoomDatabase就能操作dao对表做CRUD操作了。</p><pre class=" language-kotlin"><code class="language-kotlin">Room<span class="token punctuation">.</span><span class="token function">databaseBuilder</span><span class="token punctuation">(</span>application<span class="token punctuation">,</span>AppDataBase<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">,</span>DB_NAME<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Room的使用流程大概如上，有如下几个疑问：</p><blockquote><ol><li>RoomTestDataBase是个抽象类，抽象方法在哪实现的？</li><li>RoomTestDataBase内部的Dao是interface，内部的增删改查又是在哪实现的？</li></ol></blockquote><h3 id="创建Room-Database流程"><a href="#创建Room-Database流程" class="headerlink" title="创建Room Database流程"></a>创建Room Database流程</h3><pre class=" language-java"><code class="language-java">        <span class="token annotation punctuation">@NonNull</span>        <span class="token keyword">public</span> T <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//noinspection ConstantConditions</span>            <span class="token comment" spellcheck="true">//预检测参数 省略...</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mFactory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// SQLiteOpenHelper工厂类 创建SQLiteOpenHelper真正操作数据库</span>                mFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrameworkSQLiteOpenHelperFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//DataBase构建参数</span>            DatabaseConfiguration configuration <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">DatabaseConfiguration</span><span class="token punctuation">(</span>mContext<span class="token punctuation">,</span> mName<span class="token punctuation">,</span> mFactory<span class="token punctuation">,</span> mMigrationContainer<span class="token punctuation">,</span>                            mCallbacks<span class="token punctuation">,</span> mAllowMainThreadQueries<span class="token punctuation">,</span>                            mJournalMode<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">,</span>                            mRequireMigration<span class="token punctuation">,</span> mMigrationsNotRequiredFrom<span class="token punctuation">)</span><span class="token punctuation">;</span>            T db <span class="token operator">=</span> Room<span class="token punctuation">.</span><span class="token function">getGeneratedImplementation</span><span class="token punctuation">(</span>mDatabaseClass<span class="token punctuation">,</span> DB_IMPL_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 初始化 RoomDataBaseOpenHelper</span>            db<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> db<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 由方法名可知在这里生成实现类</span>        <span class="token annotation punctuation">@NonNull</span>        <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token punctuation">,</span> C<span class="token operator">></span> T <span class="token function">getGeneratedImplementation</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>C<span class="token operator">></span> klass<span class="token punctuation">,</span> String suffix<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">final</span> String fullPackage <span class="token operator">=</span> klass<span class="token punctuation">.</span><span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String name <span class="token operator">=</span> klass<span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> String postPackageName <span class="token operator">=</span> fullPackage<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">?</span> name                    <span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fullPackage<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">final</span> String implName <span class="token operator">=</span> postPackageName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">)</span> <span class="token operator">+</span> suffix<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//noinspection TryWithIdenticalCatches</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 通过反射获取xxxDataBase_Impl，该类通过room-compiler生成</span>                <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> aClass <span class="token operator">=</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>                        fullPackage<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> implName <span class="token operator">:</span> fullPackage <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> implName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//省略 catch exceptions</span>        <span class="token punctuation">}</span></code></pre><blockquote><p>简单的分析一下上面代码逻辑</p></blockquote><p>我们从Room.databaseBuilder().build()分析room是如何将数据库创建出来的，builder中的变量就是创建database所需的参数，在build()中进行了参数的预校验，最终调用Room.getGenratedImplementation()，拼接出类名AppDataBase_Imp，通过反射创建对象，而这个AppDataBase_Imp则是通过注解处理器自动生成的，它继承了抽象类AppDataBase，再来趴一下AppDataBase_Imp，在createOpenHelper函数中，它利用SupportSQLiteOpenHelper.Factory工厂类创建了SupportSQLiteOpenHelper，这个工厂类在建造者模式Room.databaseBuilder().build()中被初始化，真正调用的是FrameworkSQLiteOpenHelperFactory.create函数，创建了FrameworkSQLiteOpenHelper，在RoomDatabase使用的databaseOpenHelper也就是这个类了，其实FrameworkSQLiteOpenHelper是个代理类，它内部的OpenHelper继承了SQLiteOpenHelper，到此终于看到了熟悉的类型，我们直接使用SQLite通常也是直接写一个helper类直接继承SQLiteOpenHelper，而ROOM通过层层装饰省去了我们创建SQLiteOpenHelper的麻烦，最后用一张流程图总结ROOM创建database的过程。</p><p><img src="https://dreamweaver.img.we1code.cn/room.png" alt="room创建流程图"></p><h3 id="指定Room-schema的输出路径"><a href="#指定Room-schema的输出路径" class="headerlink" title="指定Room schema的输出路径"></a>指定Room schema的输出路径</h3><p>在我们使用room Database注解时，会发现有exportSchema属性，官方注释如下：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * You can set the annotation processor argument ({@code room.schemaLocation}) to tell Room to     * export the database schema into a folder. Even though it is not mandatory, it is a good     * practice to have version history of your schema in your codebase and you should commit the     * schema files into your version control system (but don't ship them with your app!).     * &lt;p>     * When {@code room.schemaLocation} is set, Room will check this variable and if it is set to     * {@code true}, the database schema will be exported into the given folder.     * &lt;p>     * {@code exportSchema} is {@code true} by default but you can disable it for databases when     * you don't want to keep history of versions (like an in-memory only database).     *     * @return Whether the schema should be exported to the given folder when the     * {@code room.schemaLocation} argument is set. Defaults to {@code true}.     */</span>    <span class="token keyword">boolean</span> <span class="token function">exportSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">true</span><span class="token punctuation">;</span></code></pre><p>大概是说这个属性是控制是否输出schema的，建议大家将数据库的schema做版本控制，方便数据库的迁移和版本升级/降级。</p><p>在gradle可以配置schema的输出目录，具体代码如下</p><pre class=" language-groovy"><code class="language-groovy">android<span class="token punctuation">{</span>    <span class="token punctuation">...</span><span class="token comment" spellcheck="true">//省略</span>    defaultConfig <span class="token punctuation">{</span>        <span class="token punctuation">...</span> <span class="token comment" spellcheck="true">//省略</span>        javaCompileOptions<span class="token punctuation">{</span>            annotationProcessorOptions<span class="token punctuation">{</span>                arguments<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"room.schemaLocation"</span><span class="token punctuation">:</span><span class="token string">"$projectDir/schemas"</span><span class="token operator">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Room的版本迁移"><a href="#Room的版本迁移" class="headerlink" title="Room的版本迁移"></a>Room的版本迁移</h3><p>在开发过程中数据库的表结构可能会发生变化，在Room中如果你不做相应的处理，则会抛出异常并提示你A migration from old_version to new_version was required but not found，<br>我们可以通过addMigrations()处理版本迁移中数据库的变动，也可以通fallbackToDestructiveMigration/fallbackToDestructiveMigrationOnDowngrade/fallbackToDestructiveMigrationFrom<br>设置数据库在版本升级的时候，删除原表并创建新表，但是会导致原数据的丢失，因此，为了防止用户数据丢失，我们需要管理好自己数据库的版本，并在版本升级时处理好变动的数据。下面示范了Fruit表中新增字段后是如何做处理的</p><pre class=" language-kotlin"><code class="language-kotlin">valversion1To2<span class="token operator">=</span><span class="token keyword">object</span><span class="token operator">:</span><span class="token function">Migration</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">migrate</span><span class="token punctuation">(</span>database<span class="token operator">:</span>SupportSQLiteDatabase<span class="token punctuation">)</span><span class="token punctuation">{</span>        database<span class="token punctuation">.</span><span class="token function">execSQL</span><span class="token punctuation">(</span><span class="token string">"ALTER TABLE fruit ADD COLUMN test TEXT NOT NULL DEFAULT''"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当遇到比较复杂的情况时，只要我们做好数据库的版本管理就都能很好的解决。</p><h3 id="CRUD流程"><a href="#CRUD流程" class="headerlink" title="CRUD流程"></a>CRUD流程</h3><p>接下来看看ROOM的CRUD流程，我们可以从DAO入手，dao_Impl也是编译时生成的文件，看看FruitDao_Impl的insertFruit函数，如下所示</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertFruit</span><span class="token punctuation">(</span><span class="token keyword">final</span> Fruit fruit<span class="token punctuation">)</span><span class="token punctuation">{</span>    __db<span class="token punctuation">.</span><span class="token function">assertNotSuspendingTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    __db<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        __insertionAdapterOfFruit<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>        __db<span class="token punctuation">.</span><span class="token function">setTransactionSuccessful</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>        __db<span class="token punctuation">.</span><span class="token function">endTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它对应的FruitDao函数</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token annotation builtin">@Insert</span><span class="token punctuation">(</span>onConflict <span class="token operator">=</span> OnConflictStrategy<span class="token punctuation">.</span>REPLACE<span class="token punctuation">)</span><span class="token keyword">fun</span> <span class="token function">insertFruit</span><span class="token punctuation">(</span>fruit<span class="token operator">:</span> Fruit<span class="token punctuation">)</span></code></pre><p>插入逻辑</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> <span class="token keyword">final</span> void <span class="token function">insert</span><span class="token punctuation">(</span>T entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> SupportSQLiteStatement stmt <span class="token operator">=</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">bind</span><span class="token punctuation">(</span>stmt<span class="token punctuation">,</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定数据</span>        stmt<span class="token punctuation">.</span><span class="token function">executeInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行插入语句</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">release</span><span class="token punctuation">(</span>stmt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最终将调用的函数</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// SQLiteProgram</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ...省略</span>        mBindArgs<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将数据存入</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// SQLiteStatement</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">executeInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">acquireReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">executeForLastInsertedRowId</span><span class="token punctuation">(</span>                    <span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBindArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getConnectionFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLiteDatabaseCorruptException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">onCorruption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token function">releaseReference</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>关于Room的原理和基本使用方法就介绍到这了，本来还想分析一下room-compiler的，但是感觉写下去篇幅会太长了。下节将借room-compiler总结一下annotation-processor的开发流程。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jetpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android代码混淆</title>
      <link href="/2018/05/29/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
      <url>/2018/05/29/Android%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在用Kotlin撸App，准备发版了，做下代码混淆，想用原来的混淆逻辑，但是发现各种报错，头大的很，觉得是自己关于混淆的知识积累不够多，是应该系统的学习一下了！顺便在此记录下遇到的坑。那下面我们开始吧。</p><a id="more"></a><h2 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h2><h3 id="开启代码混淆"><a href="#开启代码混淆" class="headerlink" title="开启代码混淆"></a>开启代码混淆</h3><p>只要在app.gradle文件下配置proguardFiles</p><pre class=" language-groovy"><code class="language-groovy">    buildTypes <span class="token punctuation">{</span>        release <span class="token punctuation">{</span>            minifyEnabled <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//是否开启混淆</span>            zipAlignEnabled <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//对齐zip</span>            debuggable <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// 是否debug</span>            versionNameSuffix <span class="token string">"_release"</span> <span class="token comment" spellcheck="true">// 版本命名后缀</span>            proguardFiles <span class="token function">getDefaultProguardFile</span><span class="token punctuation">(</span><span class="token string">'proguard-android.txt'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'proguard-rules.pro'</span> <span class="token comment" spellcheck="true">// 混淆文件</span>            signingConfig signingConfigs<span class="token operator">.</span>release        <span class="token punctuation">}</span>        <span class="token punctuation">...</span>    <span class="token punctuation">}</span></code></pre><p>proguard-android.txt 是android自带的混淆规则，我们只需要在proguard-rules.pro这个文件中配置我么的混淆规则就可以了。</p><h3 id="Proguard混淆流程"><a href="#Proguard混淆流程" class="headerlink" title="Proguard混淆流程"></a>Proguard混淆流程</h3><p><img src="https://dreamweaver.img.we1code.cn/proguard%E6%B7%B7%E6%B7%86%E6%B5%81%E7%A8%8B.jpg" alt="proguard混淆流程" title="proguard混淆流程"></p><ul><li>压缩（shrink）：检测并移除代码中无用的类、字段、方法和特性</li><li>优化（optimize）：对字节码进行优化，移除无用指令</li><li>混淆（obfuscate）：使用a，b，c，d这样简短而无意义的名称，对类、字段和方法进行重命名</li><li>预检（preveirfy）：在java平台上对处理后的代码进行预检，确保加载的class文件时可执行的</li></ul><h3 id="混淆规则"><a href="#混淆规则" class="headerlink" title="混淆规则"></a>混淆规则</h3><table><thead><tr><th>Proguard关键字</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>keep</td><td style="text-align:center">保留类和类中的成员，防止被混淆或移除</td></tr><tr><td>keepnames</td><td style="text-align:center">保留类和类中的成员，防止被混淆，成员没有被引用会被移除</td></tr><tr><td>keepclassmembers</td><td style="text-align:center">只保留类中的成员，防止被混淆或移除</td></tr><tr><td>keepclassmembernames</td><td style="text-align:center">只保留类中的成员，防止被混淆，成员没有引用会被移除</td></tr><tr><td>keepclasseswithmembers</td><td style="text-align:center">保留类和类中的成员，防止被混淆或移除，保留指明的成员，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。</td></tr><tr><td>keepclasseswithmembernames</td><td style="text-align:center">保留类和类中的成员，防止被混淆，保留指明的成员，成员没有引用会被移除，前提是指名的类中的成员必须存在，如果不存在则还是会混淆。</td></tr></tbody></table><table><thead><tr><th>通配符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>field</td><td style="text-align:center">匹配类中的所有字段</td></tr><tr><td>method</td><td style="text-align:center">匹配类中的所有方法</td></tr><tr><td>init</td><td style="text-align:center">匹配类中的所有构造函数</td></tr><tr><td>*</td><td style="text-align:center">匹配任意长度字符，但不含包名分隔符（.）。</td></tr><tr><td>**</td><td style="text-align:center">匹配任意长度字符，并且包含包名分隔符（.）。</td></tr><tr><td>***</td><td style="text-align:center">匹配任意参数类型</td></tr><tr><td>…</td><td style="text-align:center">匹配任意长度任意类型参数</td></tr></tbody></table><p>举例：<br>我们完整的包名是com.xxx.ui.MainAct，使用com.*或者<code>com.xxx.\*</code>都是无法匹配的，正确的写法是<code>com.xxx.\*.\*，</code>或者<code>com.xxx.ui.*</code></p><h3 id="避免混淆的因素"><a href="#避免混淆的因素" class="headerlink" title="避免混淆的因素"></a>避免混淆的因素</h3><ul><li>native method：因为native是根据方法名去调用的，若混淆后会导致找不到此方法名。</li><li>反射相关的方法和类：反射原理就是通过方法名和类名去实例化相应的对象，调用相关的方法。</li><li>setXX和getXX方法：这里指的是通过配置文件直接生成相应的set和get方法的相关库，所以javaBean类很多情况下不能做混淆。</li><li>第三方jar包：这个需要具体情况具体分析，很多库都会提供默认的混淆配置，大多数情况可以不用做混淆。</li></ul><h3 id="处理混淆失败问题"><a href="#处理混淆失败问题" class="headerlink" title="处理混淆失败问题"></a>处理混淆失败问题</h3><p>通常混淆失败导致gradle构建项目失败，原因在输出的错误日志上并不明显，我们可以在Build Output中找到构建出错的task，例如我构建失败的任务是transformClassesAndResourcesWithProguardForBaiduRelease，因此我可以执行</p><pre class=" language-groovy"><code class="language-groovy">gradlew transformClassesAndResourcesWithProguardForBaiduRelease <span class="token operator">--</span> stacktrace</code></pre><p>这样我们就能在shell中看清楚到底是什么地方出错啦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.guardsquare.com/en/products/proguard/manual/troubleshooting#descriptorclass">ProGuard manual</a><br><a href="https://www.jianshu.com/p/b5b2a5dfaaf4">Android混淆</a><br><a href="https://www.jianshu.com/p/86ee6ef970ef">Android 代码混淆零基础入门</a><br><a href="https://www.jianshu.com/p/b471db6a01af">ProGuard 最全混淆规则说明</a><br><a href="https://blog.csdn.net/youyu_torch/article/details/78775100?utm_source=blogxgwz3">Android 混淆：proguard实践</a></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins自动打包Android应用</title>
      <link href="/2018/04/28/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/"/>
      <url>/2018/04/28/jenkins%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>已经用Jenkins做过很多Android自动化打包的配置了，无奈记性不咋地，每配一次就要查一次资料，踩同样的坑，浪费不少时间和精力，更是被一些莫名其妙的问题折磨到抓狂，于是我决定在此把Jenkins的配置流程和遇到的坑整理、记录下来（其实早就想这么做了，但是懒癌晚期），方便以后做一些查阅。</p><a id="more"></a><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="全局工具配置"><a href="#全局工具配置" class="headerlink" title="全局工具配置"></a>全局工具配置</h3><p>在系统管理中做全局工具配置，如下图<br><img src="https://dreamweaver.img.we1code.cn/optional1.png" alt="全局工具配置"><br>配置 JAVA_HOME、GRADLE_HOME 指向JDK的安装目录和Gradle的解压目录，然后配置Jenkins的全局变量，这里我配置了python的路径，GRADLE_USER_HOME，这个变量用作gradle的缓存目录，还配置了ANDROID_HOME指向AndroidSdk的目录。</p><h3 id="基础工程配置"><a href="#基础工程配置" class="headerlink" title="基础工程配置"></a>基础工程配置</h3><p>基础工程配置分为配置构建参数、源码管理、配置触发器、配置构建工具、构建后的一些操作</p><h3 id="构建任务重命名"><a href="#构建任务重命名" class="headerlink" title="构建任务重命名"></a>构建任务重命名</h3><p><img src="https://dreamweaver.img.we1code.cn/%E4%BB%BB%E5%8A%A1%E9%87%8D%E5%91%BD%E5%90%8D.png" alt="重命名"></p><h3 id="配置构建参数"><a href="#配置构建参数" class="headerlink" title="配置构建参数"></a>配置构建参数</h3><p>选择参数化构建过程&gt;选项参数<br><img src="https://dreamweaver.img.we1code.cn/jenkins02.jpg" alt="构建参数"></p><h3 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h3><p>选择git作为版本控制工具<br><img src="https://dreamweaver.img.we1code.cn/jenkins03.png" alt="源码管理"></p><h3 id="配置触发器"><a href="#配置触发器" class="headerlink" title="配置触发器"></a>配置触发器</h3><p>解释下触发器的各个选项</p><blockquote><p>触发远程构建 (例如,使用脚本)<br>GitHub hook trigger for GITScm polling<br>其他工程构建后触发<br>定时构建<br>Help for feature: 定时构建  </p></blockquote><h4 id="轮询-SCM"><a href="#轮询-SCM" class="headerlink" title="轮询 SCM"></a>轮询 SCM</h4><p>格式为 <em> </em> <em> </em> *<br>第一个星号表示分钟，取值0~59<br>第二个星号表示小时，取值0~23<br>第三个星号表示一个月内的天数，取值1~31<br>第四个星号表示第几个月，取值1~12<br>第五个星号表示一周的第几天，取值0~7</p><h3 id="多渠道打包配置"><a href="#多渠道打包配置" class="headerlink" title="多渠道打包配置"></a>多渠道打包配置</h3><h4 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h4><p><img src="https://dreamweaver.img.we1code.cn/Jenkins%E6%89%93%E5%8C%85%E6%B8%A0%E9%81%93%E5%8F%B7%E9%85%8D%E7%BD%AE.jpg" alt="添加渠道选项参数"></p><h4 id="接入友盟"><a href="#接入友盟" class="headerlink" title="接入友盟"></a>接入<a href="https://developer.umeng.com/docs/66632/detail/101848">友盟</a></h4><pre class=" language-groove"><code class="language-groove">//build.gradle 配置    productFlavors {        yingyongbao {        }        huawei {        }    }    productFlavors.all { flavor ->        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]    }</code></pre><h3 id="加固"><a href="#加固" class="headerlink" title="加固"></a>加固</h3><p>我在项目使用的是乐固加固，首先去下载他们的<a href="https://leguimg.qcloud.com/ms-client/java-tool/1.0.3/ms-shield.jar">jar包</a>。进入项目配置文件开始配置：  </p><p>配置构建后操作，执行打包后再执行加固，如下图：<br><img src="https://dreamweaver.img.we1code.cn/%E5%8A%A0%E5%9B%BA%E6%AD%A5%E9%AA%A41.jpg" alt="加固步骤1"></p><p>接下来转到加固项目的配置中，可以将下载下来的jar包做版本管理，也可以直接放在项目根目录中，配置构建步骤：<br><img src="https://dreamweaver.img.we1code.cn/%E5%8A%A0%E5%9B%BA%E6%AD%A5%E9%AA%A42.jpg" alt="加固步骤2"></p><h3 id="再签名"><a href="#再签名" class="headerlink" title="再签名"></a>再签名</h3><p>然鹅加固完之后并没有结束，需要进行再签名，</p><blockquote><p><a href="https://cloud.tencent.com/document/product/283/3271">加固过程不可避免的会破坏签名，因此加固后的包需重签名，未签名应用将无法顺利安装。</a></p></blockquote><p>这里我是又另外建了一个项目，应该还有比较好的做法比如构建后执行什么的(需要另装插件)  </p><p>主要看看签名脚本是怎么写的</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用apksiger命令为apk签名'</span><span class="token punctuation">)</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span>jks_file <span class="token operator">=</span> Noneapk_file <span class="token operator">=</span> None<span class="token keyword">for</span> file <span class="token keyword">in</span> files<span class="token punctuation">:</span>    <span class="token keyword">if</span> file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.jks'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        jks_file <span class="token operator">=</span> file    <span class="token keyword">elif</span> file<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        apk_file <span class="token operator">=</span> file    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">if</span> jks_file <span class="token operator">==</span> None <span class="token operator">or</span> apk_file <span class="token operator">==</span> None<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前目录不存在签名文件或者apk文件，请确认签名文件在当前目录下'</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>file_name<span class="token operator">=</span>apk_filezipalign_name<span class="token operator">=</span>file_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'_zipalign.apk'</span>command<span class="token operator">=</span><span class="token string">'zipalign -v -p 4 {0} {1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> zipalign_name<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span>jks_name<span class="token operator">=</span>jks_filekey_alias <span class="token operator">=</span> <span class="token string">'bonadeTravel'</span>ks_pass <span class="token operator">=</span> <span class="token string">'bonadetravel888'</span>key_pass <span class="token operator">=</span> <span class="token string">'bonadetravel888'</span>apk_name<span class="token operator">=</span>zipalign_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'_signed.apk'</span>command<span class="token operator">=</span><span class="token string">'apksigner sign --ks {0} --ks-key-alias {1} --ks-pass pass:{2} --key-pass pass:{3} --out {4} {5}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>jks_name<span class="token punctuation">,</span> key_alias<span class="token punctuation">,</span> ks_pass<span class="token punctuation">,</span> key_pass<span class="token punctuation">,</span> apk_name<span class="token punctuation">,</span> zipalign_name<span class="token punctuation">)</span>os<span class="token punctuation">.</span>system<span class="token punctuation">(</span>command<span class="token punctuation">)</span></code></pre><h3 id="执行构建脚本"><a href="#执行构建脚本" class="headerlink" title="执行构建脚本"></a>执行构建脚本</h3><pre class=" language-groovy"><code class="language-groovy">cleanassemble<span class="token punctuation">$</span><span class="token punctuation">{</span>channel<span class="token punctuation">}</span><span class="token punctuation">$</span><span class="token punctuation">{</span>buildType<span class="token punctuation">}</span> <span class="token operator">--</span>stacktrace<span class="token comment" spellcheck="true">//如果需要打所有渠道包</span>assemble<span class="token punctuation">$</span><span class="token punctuation">{</span>buildType<span class="token punctuation">}</span> <span class="token operator">--</span>stacktrace</code></pre><h3 id="构建后的操作"><a href="#构建后的操作" class="headerlink" title="构建后的操作"></a>构建后的操作</h3><p>构建完成后的操作:  </p><ol><li>提取apk文件</li><li>上传到蒲公英</li><li>jenkins中生成二维码</li><li>通知测试人员</li></ol><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>想修改一下apk文件输出目录，于是修改build.gradle  </p><pre class=" language-groovy"><code class="language-groovy">applicationVariants<span class="token operator">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-></span>    variant<span class="token operator">.</span>outputs<span class="token operator">.</span>each <span class="token punctuation">{</span> output <span class="token operator">-></span>        <span class="token keyword">def</span> outputFile <span class="token operator">=</span> output<span class="token operator">.</span>outputFile        <span class="token keyword">if</span> <span class="token punctuation">(</span>outputFile <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> outputFile<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.apk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>outputFile<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">def</span> fileName <span class="token operator">=</span> outputFile<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".apk"</span><span class="token punctuation">,</span> <span class="token string">"-${defaultConfig.versionName}.apk"</span><span class="token punctuation">)</span>                output<span class="token operator">.</span>outputFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\user\\Desktop\\apk\\${defaultConfig.versionName}"</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在4.0+gradle方法稍有不同</p><pre class=" language-groovy"><code class="language-groovy">applicationVariants<span class="token operator">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-></span>    variant<span class="token operator">.</span>outputs<span class="token operator">.</span>all <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 自定义输出路径 但是getPackageApplication()将在19年底被移除</span>        variant<span class="token operator">.</span><span class="token function">getPackageApplication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>outputDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>project<span class="token operator">.</span>rootDir<span class="token operator">.</span>absolutePath <span class="token operator">+</span> File<span class="token operator">.</span>separator <span class="token operator">+</span> <span class="token string">"outputs"</span><span class="token punctuation">)</span>        outputFileName <span class="token operator">=</span> <span class="token string">"AppName-${variant.flavorName}-${variant.buildType.name}-v${variant.versionName}_${time()}.apk"</span>    <span class="token punctuation">}</span></code></pre><p>最终版本</p><pre class=" language-groovy"><code class="language-groovy">applicationVariants<span class="token operator">.</span>all <span class="token punctuation">{</span> variant <span class="token operator">-></span>    variant<span class="token operator">.</span>outputs<span class="token operator">.</span>all <span class="token punctuation">{</span>        <span class="token keyword">def</span> newName        <span class="token keyword">def</span> timeNow        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"true"</span><span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span>IS_JENKINS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            timeNow <span class="token operator">=</span> JENKINS_TIME            variant<span class="token operator">.</span>packageApplicationProvider<span class="token operator">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span>outputDirectory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>project<span class="token operator">.</span>rootDir<span class="token operator">.</span>absolutePath <span class="token operator">+</span> File<span class="token operator">.</span>separator <span class="token operator">+</span> <span class="token string">"apks"</span><span class="token punctuation">)</span>            newName <span class="token operator">=</span> <span class="token string">"xxx-v${APP_VERSION}-${timeNow}-${variant.buildType.name}.apk"</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            timeNow <span class="token operator">=</span> <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>variant<span class="token operator">.</span>buildType<span class="token operator">.</span>name<span class="token operator">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                newName <span class="token operator">=</span> <span class="token string">"xxx-v${APP_VERSION}-debug.apk"</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                newName <span class="token operator">=</span> <span class="token string">"xxx-v${APP_VERSION}-${timeNow}-${variant.buildType.name}.apk"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        outputFileName <span class="token operator">=</span> <span class="token string">"${newName}"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><h3 id="在jenkins中编译的时候报错找不到abc-ab-share-pack-mtrl-alpha-9-png"><a href="#在jenkins中编译的时候报错找不到abc-ab-share-pack-mtrl-alpha-9-png" class="headerlink" title="在jenkins中编译的时候报错找不到abc_ab_share_pack_mtrl_alpha.9.png"></a>在jenkins中编译的时候报错找不到abc_ab_share_pack_mtrl_alpha.9.png</h3><p><img src="https://dreamweaver.img.we1code.cn/jenkins04.png" alt="error"><br>wtf没见过这种错误啊，我估摸着会不会是路径太长的原因，于是在gradle.properties中配置了android.buildCacheDir=F\://androidCache，但是，并没有卵用，秉承着不解决问题不罢休的态度，我又浪费了一个下午。终于，在stackoverflow上，看到有个哥们提到在jenkins中设置GRADLE_USER_HOME这个环境变量，随便指向一个目录。然后就不报错了。我的内心是崩溃的，好吧，总算是解决了，但是为什么AndroidStudio下编译就不会报错呢。</p><h3 id="com-sun-org-apache-xerces-internal-impl-io-MalformedByteSequenceException-3-字节的-UTF-8-序列的字节-3-无效"><a href="#com-sun-org-apache-xerces-internal-impl-io-MalformedByteSequenceException-3-字节的-UTF-8-序列的字节-3-无效" class="headerlink" title="com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: 3 字节的 UTF-8 序列的字节 3 无效"></a>com.sun.org.apache.xerces.internal.impl.io.MalformedByteSequenceException: 3 字节的 UTF-8 序列的字节 3 无效</h3><p>又碰到一个奇怪的问题，这个坑是databinding框架产生的，由于我是在linux上开发的，jenkins环境部署在本地的windows上，在xml中databinding的表达式中如果出现了中文字符，就会报编码错误，于是我只能硬着头皮修改布局文件，把中文字符移到资源文件中。</p><h3 id="开启混淆后报错，proguard-rules-pro文件配置出错"><a href="#开启混淆后报错，proguard-rules-pro文件配置出错" class="headerlink" title="开启混淆后报错，proguard-rules.pro文件配置出错"></a>开启混淆后报错，proguard-rules.pro文件配置出错</h3><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">Execution</span> failed for task ':app:transformClassesAndResourcesWithProguardForRelease'.</span></code></pre><p>通过执行</p><pre class=" language-batch"><code class="language-batch"><span class="token command"><span class="token keyword">gradlew</span> <span class="token parameter attr-name">--stacktrace</span> task xxx</span></code></pre><p>可以看到具体的报错信息，主要是不能混淆的文件没有忽略掉，逐个干掉就行了。</p><h3 id="jenkins使用不了系统的环境变量"><a href="#jenkins使用不了系统的环境变量" class="headerlink" title="jenkins使用不了系统的环境变量"></a>jenkins使用不了系统的环境变量</h3><p>配置一下jenkins的环境变量然后重启生效</p><p><img src="https://dreamweaver.img.we1code.cn/%E9%85%8D%E7%BD%AEJenkins%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="环境变量配置"></p><h3 id="jenkins控制台出现中文乱码"><a href="#jenkins控制台出现中文乱码" class="headerlink" title="jenkins控制台出现中文乱码"></a>jenkins控制台出现中文乱码</h3><p>jenkins环境变量中添加 key: LANG value: zh.CH.UTF-8</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.aoaoyi.com/archives/1126.html">用apksigner进行批量签名的脚本</a><br><a href="https://cloud.tencent.com/developer/article/1135340">乐固加固FAQ</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>上面记录的问题只不过是诸多问题的冰山一角，以后我遇到的jenkins相关的问题都会记录于此。想要熟练运用Android打包，看样子还是要深入研究一下gradle才行呐。</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
